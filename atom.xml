<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kingiol Ding</title>
  <subtitle>不作死就不会死.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://kingiol.github.io/"/>
  <updated>2015-03-02T14:54:05.000Z</updated>
  <id>http://kingiol.github.io/</id>
  
  <author>
    <name>Kingiol</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iOS中UIButton实现双击操作</title>
    <link href="http://kingiol.github.io/2015/03/02/ios-uibutton-double-click/"/>
    <id>http://kingiol.github.io/2015/03/02/ios-uibutton-double-click/</id>
    <published>2015-03-02T14:44:00.000Z</published>
    <updated>2015-03-02T14:54:05.000Z</updated>
    
    <content type="html">&lt;p&gt;我们在日常的开发过程中，一个UIButton可能需要承载许多的操作，用得最多的当然是单击的操作，但是有的时候，我们需要使用双击操作，而apple并没有提供封装的方法，所以，我们就自己来构建一个双击的操作示例:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; * tabButton = [&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; buttonWithType:&lt;span class=&quot;built_in&quot;&gt;UIButtonTypeCustom&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 点击操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[tabButton addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tabButtonTapped:forEvent:) forControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchDown&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 双击操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[tabButton addTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(repeatBtnTapped:forEvent:) forControlEvents:&lt;span class=&quot;built_in&quot;&gt;UIControlEventTouchDownRepeat&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)tabButtonTapped:(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)sender forEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; performSelector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tabButtonTap:) withObject:sender afterDelay:&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)tabButtonTap:(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;单击操作&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)repeatBtnTapped:(&lt;span class=&quot;built_in&quot;&gt;UIButton&lt;/span&gt; *)sender forEvent:(&lt;span class=&quot;built_in&quot;&gt;UIEvent&lt;/span&gt; *)event &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; cancelPreviousPerformRequestsWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(tabButtonTap:) object:sender];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;双击操作&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;我们在日常的开发过程中，一个UIButton可能需要承载许多的操作，用得最多的当然是单击的操作，但是有的时候，我们需要使用双击操作，而apple并没有提供封装的方法，所以，我们就自己来构建一个双击的操作示例:&lt;/p&gt;
&lt;figure class=&quot;highlight obj
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>xcode Archive 出现Your account already has a valid iOS distribution certificate警告</title>
    <link href="http://kingiol.github.io/2015/02/07/xcode-your-account-already-has-a-valid-ios-distribution-certificate/"/>
    <id>http://kingiol.github.io/2015/02/07/xcode-your-account-already-has-a-valid-ios-distribution-certificate/</id>
    <published>2015-02-07T14:16:00.000Z</published>
    <updated>2015-02-07T14:53:51.000Z</updated>
    
    <content type="html">&lt;p&gt;在进行Xcode Archive进行Ad-hoc生成ipa包的时候，有时会出现&lt;code&gt;Your account already has a valid iOS distribution certificate&lt;/code&gt;的警告框，如下图所以：&lt;/p&gt;
&lt;img src=&quot;/images/2015/02/07/xcode-your-account-already-has-a-valid-ios-distribution-certificate-0.png&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;往往出现这样的情况是由于换了一台新的电脑设备进行Archive,所以证书方面出现了问题&lt;/p&gt;
&lt;p&gt;解决方法如下:&lt;/p&gt;
&lt;p&gt;到MemberCenter中删除掉已经存在的distribution certificate，然后通过xcode生成一个新的。&lt;/p&gt;
&lt;p&gt;【PS：删除已存在的证书并不会对App Store中的应用产生影响】&lt;/p&gt;
&lt;p&gt;至于如何用xcode生成新的证书，可以参考&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingCertificates/MaintainingCertificates.html#//apple_ref/doc/uid/TP40012582-CH31-SW6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;苹果官方文档&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在进行Xcode Archive进行Ad-hoc生成ipa包的时候，有时会出现&lt;code&gt;Your account already has a valid iOS distribution certificate&lt;/code&gt;的警告框，如下图所以：&lt;/p&gt;
&lt;img src=&quot;/images/2015/02/07/xcode-your-account-already-has-a-valid-ios-distribution-certificate-0.png&quot;&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
      <category term="Xcode" scheme="http://kingiol.github.io/categories/iOS/Xcode/"/>
    
    
      <category term="iOS" scheme="http://kingiol.github.io/tags/iOS/"/>
    
      <category term="Xcode" scheme="http://kingiol.github.io/tags/Xcode/"/>
    
  </entry>
  
  <entry>
    <title>swift高级特性一瞥</title>
    <link href="http://kingiol.github.io/2014/07/27/swift-ninja-challenge/"/>
    <id>http://kingiol.github.io/2014/07/27/swift-ninja-challenge/</id>
    <published>2014-07-26T23:53:00.000Z</published>
    <updated>2014-07-27T01:58:39.000Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Playground - noun: a place where people can play&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &lt;span class=&quot;built_in&quot;&gt;UIKit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func swap&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; a: T, &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; with b: T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (a, b) = (b, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = &lt;span class=&quot;string&quot;&gt;&quot;Marin&quot;&lt;/span&gt;, b = &lt;span class=&quot;string&quot;&gt;&quot;Todorov&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap(&amp;amp;a, &amp;amp;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a, b]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func flexStrings(s1: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, s2: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 + s2 == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt; : s1 + s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings(s1: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings(s1: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, s2: &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func sumAny(anys: Any...) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String((anys.map(&amp;#123;item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; as String, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; as Int:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; let s as String where s.toInt() &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.toInt()!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; is Int:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item as Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;) as [Int]).reduce(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny(Double(), &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-10&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny(&lt;span class=&quot;string&quot;&gt;&quot;Marin Todorow&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-3&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func countFrom(from: Int, &lt;span class=&quot;meta&quot;&gt;#to: Int) &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(from)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; from &amp;lt; to &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        countFrom(from + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, to: to)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;countFrom(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, to: &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func reverseString(input: String, output: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; input.isEmpty &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; output&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; reverseString(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        input.substringToIndex(input.endIndex.predecessor()),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        output: output + input.substringFromIndex(input.endIndex.predecessor()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;reverseString(&lt;span class=&quot;string&quot;&gt;&quot;Marin Todorov&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func charMult(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;: Character, result: String, length: Double) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; Int64(countElements(result)) &amp;lt; Int64(length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; charMult(&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;, result+&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;, length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@infix func * (left: Character, right: Double) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; charMult(left, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, right)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;&amp;gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;%&quot;&lt;/span&gt; + &lt;span class=&quot;string&quot;&gt;&quot;-&quot;&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;&quot;Z&quot;&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func doWork() -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; arc4random() % &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func reportSuccess() -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;success!&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func reportError() -&amp;gt; Bool &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    println(&lt;span class=&quot;string&quot;&gt;&quot;error&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;doWork() &amp;amp;&amp;amp; reportSuccess() || reportError()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;extension Array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    func swapElementAtIndex(index: Int) -&amp;gt; (Int -&amp;gt; Array) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123; withIndex &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            var result = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; index &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.count &amp;amp;&amp;amp; withIndex &amp;lt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.count &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                (result[index], result[withIndex]) = (result[withIndex], result[index])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arrayWithElementAtIndexToFront:(Int) -&amp;gt; Array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; swapElementAtIndex(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; as Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var arrayWithElementAtIndexToBack: (Int) -&amp;gt; Array &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; swapElementAtIndex((&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.count - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) as Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;let list = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.arrayWithElementAtIndexToBack(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;list.arrayWithElementAtIndexToFront(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 9&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Suit &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Clubs, Diamonds, Hearts, Spades&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Rank &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Jack, Queen, King, Ace&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; Num(Int)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Card &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let suit: Suit&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let rank: Rank&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func countHand(cards: [Card], previousCard: Card = Card(suit: Suit.Spades, rank: Rank.Num(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;))) -&amp;gt; Int &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; cards.isEmpty &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let fn: () -&amp;gt; Int = &amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; countHand(Array(dropFirst(cards)), previousCard: cards[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (previousCard.suit, previousCard.rank, cards[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].suit, cards[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].rank) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; (Suit.Diamonds, Rank.Num(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;), _, Rank.Ace):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; + fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; (Suit.Hearts, _, _, Rank.Num(let a)) where a % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; + fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;countHand([&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card(suit:Suit.Hearts, rank:Rank.Num(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card(suit:Suit.Hearts, rank:Rank.Num(&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card(suit:Suit.Diamonds, rank:Rank.Num(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card(suit:Suit.Clubs, rank:Rank.Ace),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Card(suit:Suit.Diamonds, rank:Rank.Jack)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Playground - noun: a place where people can play&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;import &lt;span class=&quot;built_in&quot;&gt;UIKit&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func swap&amp;lt;T&amp;gt;(&lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; a: T, &lt;span class=&quot;keyword&quot;&gt;inout&lt;/span&gt; with b: T) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (a, b) = (b, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var a = &lt;span class=&quot;string&quot;&gt;&quot;Marin&quot;&lt;/span&gt;, b = &lt;span class=&quot;string&quot;&gt;&quot;Todorov&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;swap(&amp;amp;a, &amp;amp;b)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[a, b]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func flexStrings(s1: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, s2: String = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s1 + s2 == &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ? &lt;span class=&quot;string&quot;&gt;&quot;none&quot;&lt;/span&gt; : s1 + s2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings(s1: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;flexStrings(s1: &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;, s2: &lt;span class=&quot;string&quot;&gt;&quot;world&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;func sumAny(anys: Any...) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; String((anys.map(&amp;#123;item &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; item &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; as String, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; as Int:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; let s as String where s.toInt() &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s.toInt()!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; is Int:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item as Int&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;) as [Int]).reduce(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; + $&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny(Double(), &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-10&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sumAny(&lt;span class=&quot;string&quot;&gt;&quot;Marin Todorow&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;-3&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;10&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;33&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
      <category term="Swift" scheme="http://kingiol.github.io/categories/iOS/Swift/"/>
    
    
      <category term="iOS" scheme="http://kingiol.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="http://kingiol.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C和Swift的交互操作</title>
    <link href="http://kingiol.github.io/2014/06/04/interactive-between-objective-c-and-swift/"/>
    <id>http://kingiol.github.io/2014/06/04/interactive-between-objective-c-and-swift/</id>
    <published>2014-06-04T09:34:00.000Z</published>
    <updated>2015-05-28T14:20:39.000Z</updated>
    
    <content type="html">&lt;img src=&quot;/images/2014/06/04/interactive-between-objective-c-and-swift-0.jpg&quot;&gt;
&lt;img src=&quot;/images/2014/06/04/interactive-between-objective-c-and-swift-1.jpg&quot;&gt;
&lt;p&gt;伴随着WWDC2014,令无数的开发者又开始忙碌起来，不管Swift的评价到底怎么样，总是令人兴奋的，今天，我们就来讨论一下Objective-C和Swift的互相调用。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;Swift调用OC&quot;&gt;&lt;a href=&quot;#Swift调用OC&quot; class=&quot;headerlink&quot; title=&quot;Swift调用OC&quot;&gt;&lt;/a&gt;Swift调用OC&lt;/h2&gt;&lt;h4 id=&quot;1-添加一个OC的-h头文件和-m实现体&quot;&gt;&lt;a href=&quot;#1-添加一个OC的-h头文件和-m实现体&quot; class=&quot;headerlink&quot; title=&quot;1.添加一个OC的.h头文件和.m实现体&quot;&gt;&lt;/a&gt;1.添加一个OC的.h头文件和.m实现体&lt;/h4&gt;&lt;p&gt;添加一个OC源程序文件到我们的工程中，取名为Util.h和Util.m&lt;/p&gt;
&lt;h4 id=&quot;2-添加链接的头文件&quot;&gt;&lt;a href=&quot;#2-添加链接的头文件&quot; class=&quot;headerlink&quot; title=&quot;2.添加链接的头文件&quot;&gt;&lt;/a&gt;2.添加链接的头文件&lt;/h4&gt;&lt;p&gt;当我们添加.m文件的时候,Xcode会弹出一个对话框，要我们配置链接的头文件,点击YES:&lt;/p&gt;
&lt;img src=&quot;/images/2014/06/04/interactive-between-objective-c-and-swift-2.png&quot;&gt;
&lt;p&gt;如果你并没有看到这个对话框或者不小心删除了这个链接文件，你可以自己添加一个.h文件，命名为&amp;lt;#YourProjectName&amp;gt;-Bridging-Header.h&lt;/p&gt;
&lt;h4 id=&quot;3-构建刚刚创建的OC类&quot;&gt;&lt;a href=&quot;#3-构建刚刚创建的OC类&quot; class=&quot;headerlink&quot; title=&quot;3.构建刚刚创建的OC类&quot;&gt;&lt;/a&gt;3.构建刚刚创建的OC类&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Util.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Util&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt; someProperty;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;figcaption&gt;&lt;span&gt;Util.m&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Util.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Util&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)someMethod &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;SomeMethod Ran&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;4-添加类到链接头文件中&quot;&gt;&lt;a href=&quot;#4-添加类到链接头文件中&quot; class=&quot;headerlink&quot; title=&quot;4.添加类到链接头文件中&quot;&gt;&lt;/a&gt;4.添加类到链接头文件中&lt;/h4&gt;&lt;p&gt;在YourProject-Bridging-Header.h文件中添加:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;Util.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5 id=&quot;5-在Swift中使用Util类&quot;&gt;&lt;a href=&quot;#5-在Swift中使用Util类&quot; class=&quot;headerlink&quot; title=&quot;5.在Swift中使用Util类&quot;&gt;&lt;/a&gt;5.在Swift中使用Util类&lt;/h5&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;figcaption&gt;&lt;span&gt;SomeSwiftFile.swift&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var instanceOfUtilObject: Util = Util()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instanceOfUtilObject.someProperty = &lt;span class=&quot;string&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(instanceOfUtilObject.someProperty)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;instanceOfUtilObject.someMethod()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并不需要额外的添加import操作，链接头文件已经为我们准备好了一切关联。&lt;/p&gt;
&lt;h2 id=&quot;OC调用Swift&quot;&gt;&lt;a href=&quot;#OC调用Swift&quot; class=&quot;headerlink&quot; title=&quot;OC调用Swift&quot;&gt;&lt;/a&gt;OC调用Swift&lt;/h2&gt;&lt;h4 id=&quot;1-创建一个新的Swift类&quot;&gt;&lt;a href=&quot;#1-创建一个新的Swift类&quot; class=&quot;headerlink&quot; title=&quot;1.创建一个新的Swift类&quot;&gt;&lt;/a&gt;1.创建一个新的Swift类&lt;/h4&gt;&lt;p&gt;添加一个新的Swift类，名位SwiftObject.swift&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;figcaption&gt;&lt;span&gt;SwiftObject.swift&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import Foundation&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;class SwiftObject : &lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	var someProperty: AnyObject = &lt;span class=&quot;string&quot;&gt;&quot;Some Initializer Val&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	init()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	func someFunction(someArg: AnyObject) -&amp;gt; String &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		var returnVal = &lt;span class=&quot;string&quot;&gt;&quot;You sent me \(someArg)&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnVal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;2-在OC类中import-Swift类&quot;&gt;&lt;a href=&quot;#2-在OC类中import-Swift类&quot; class=&quot;headerlink&quot; title=&quot;2.在OC类中import Swift类&quot;&gt;&lt;/a&gt;2.在OC类中import Swift类&lt;/h4&gt;&lt;p&gt;在需要使用Swift类的OC实现体文件中导入swift类:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#import &lt;span class=&quot;meta-string&quot;&gt;&quot;&amp;lt;#YourProjectName#&amp;gt;-Swift.h&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&amp;lt;#YourProjectName#&amp;gt;-Swift.h这个文件已经被自动创建了，即使你不能够看到它。&lt;/p&gt;
&lt;h4 id=&quot;3-在OC中调用Swift&quot;&gt;&lt;a href=&quot;#3-在OC中调用Swift&quot; class=&quot;headerlink&quot; title=&quot;3.在OC中调用Swift&quot;&gt;&lt;/a&gt;3.在OC中调用Swift&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;SwiftObject *ob = [SwiftObject new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;ob.someProperty: %@&quot;&lt;/span&gt;, ob.someProperty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ob.someProperty = &lt;span class=&quot;string&quot;&gt;@&quot;Hello World&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;ob.someProperty: %@&quot;&lt;/span&gt;, ob.someProperty);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *retString = [ob someFunction:&lt;span class=&quot;string&quot;&gt;@&quot;Arg&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;RetString: %@&quot;&lt;/span&gt;, retString);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Swift单例的实现&quot;&gt;&lt;a href=&quot;#Swift单例的实现&quot; class=&quot;headerlink&quot; title=&quot;Swift单例的实现&quot;&gt;&lt;/a&gt;Swift单例的实现&lt;/h2&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;class UtilSingleton: &lt;span class=&quot;built_in&quot;&gt;NSObject&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var iVal: Int = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    class var shareInstance: UtilSingleton &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        get &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; Static &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; var instance: UtilSingleton? = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; var token: &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;Static.token, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                Static.instance = UtilSingleton()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Static.instance!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如何使用:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;UtilSingleton.shareInstance.iVal++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;println(&lt;span class=&quot;string&quot;&gt;&quot;singleton new iVal = \(UtilSingleton.shareInstance.iVal)&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/2014/06/04/interactive-between-objective-c-and-swift-0.jpg&quot;&gt;
&lt;img src=&quot;/images/2014/06/04/interactive-between-objective-c-and-swift-1.jpg&quot;&gt;
&lt;p&gt;伴随着WWDC2014,令无数的开发者又开始忙碌起来，不管Swift的评价到底怎么样，总是令人兴奋的，今天，我们就来讨论一下Objective-C和Swift的互相调用。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS8" scheme="http://kingiol.github.io/categories/iOS8/"/>
    
    
  </entry>
  
  <entry>
    <title>GCD中的一些高级特性</title>
    <link href="http://kingiol.github.io/2014/04/20/advanced-feature-of-gcd/"/>
    <id>http://kingiol.github.io/2014/04/20/advanced-feature-of-gcd/</id>
    <published>2014-04-20T08:20:00.000Z</published>
    <updated>2014-04-20T09:28:56.000Z</updated>
    
    <content type="html">&lt;img src=&quot;/images/2014/04/20/advanced-feature-of-gcd-0.jpg&quot;&gt;
&lt;p&gt;在开发中执行比较耗时的程序的时候，我们通常都是运用多线程的方式来处理的，在iOS的开发中我们可以使用GCD来处理，一旦用到了多线程就不可避免的会出现线程之间的锁的问题(死锁，读写锁，互斥锁等等)。下面我们就来谈谈在GCD中如何避免多线程操作的读写锁以前其他的一些特性。&lt;/p&gt;
&lt;h3 id=&quot;1-运用GCD避免读写锁导致线程安全问题&quot;&gt;&lt;a href=&quot;#1-运用GCD避免读写锁导致线程安全问题&quot; class=&quot;headerlink&quot; title=&quot;1.运用GCD避免读写锁导致线程安全问题&quot;&gt;&lt;/a&gt;1.运用GCD避免读写锁导致线程安全问题&lt;/h3&gt;&lt;p&gt;假设，我们有一个&lt;code&gt;DataManager&lt;/code&gt;类，它用来管理整个程序中的数据，再操作的时候就会出现添加数据和读取数据的操作，如果在同一个时间点，两个线程同时要对数据进行添加操作的话，则就会发生操作错误的问题，为了解决这个我们运用到GCD中的barrier和sync操作:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataManager&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *dataArray;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;dispatch_queue_t&lt;/span&gt; concurrentDataQueue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DataManager&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+ (instancetype)shareInstance &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; DataManager *dataManager = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;dispatch_once_t&lt;/span&gt; onceToken;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_once&lt;/span&gt;(&amp;amp;onceToken, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataManager = [[DataManager alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dataManager.concurrentDataQueue = dispatch_queue_create(&lt;span class=&quot;string&quot;&gt;&quot;com.kingiol.gcd.dataManagerQueue&quot;&lt;/span&gt;, DISPATCH_QUEUE_CONCURRENT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; dataManager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __block &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *returnData = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;dispatch_sync&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.concurrentDataQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        returnData = [_dataArray &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; returnData;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)addData:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)data &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (data) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_barrier_async(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.concurrentDataQueue, ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            [_dataArray addObject:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上述的代码就能够很好的处理多线程对dataArray数组的操作，并且不会出现读写锁的问题。&lt;/p&gt;
&lt;h3 id=&quot;2-运用GCD的group来监听一组并发是否运行结束&quot;&gt;&lt;a href=&quot;#2-运用GCD的group来监听一组并发是否运行结束&quot; class=&quot;headerlink&quot; title=&quot;2.运用GCD的group来监听一组并发是否运行结束&quot;&gt;&lt;/a&gt;2.运用GCD的group来监听一组并发是否运行结束&lt;/h3&gt;&lt;p&gt;如果当前有3张图片，我们需要从网络上面下载，然后全部下载完成之后，我们需要统一的提醒用户下载完成，这个时候因为每一个图片下载都是并发的，传统的方法是每一个线程各自都有一个bool变量，然后我们去魂环判断这么变量是不是都被置成已完成的状态。现在我们来运用GCD中的group特性来统一处理:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dispatch_group_t downloadGroup = dispatch_group_create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        dispatch_group_enter(downloadGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;//下载图片程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;comment&quot;&gt;//在图片下载完成的block中调用:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            dispatch_group_leave(downloadGroup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dispatch_group_notify(downloadGroup, dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; *alertView = [[&lt;span class=&quot;built_in&quot;&gt;UIAlertView&lt;/span&gt; alloc] initWithTitle:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; message:&lt;span class=&quot;string&quot;&gt;@&quot;全部下载完成&quot;&lt;/span&gt; delegate:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; cancelButtonTitle:&lt;span class=&quot;string&quot;&gt;@&quot;cancel&quot;&lt;/span&gt; otherButtonTitles:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [alertView show];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;img src=&quot;/images/2014/04/20/advanced-feature-of-gcd-0.jpg&quot;&gt;
&lt;p&gt;在开发中执行比较耗时的程序的时候，我们通常都是运用多线程的方式来处理的，在iOS的开发中我们可以使用GCD来处理，一旦用到了多线程就不可避免的会出现线程
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>处理UITabbar中选中图片变小的问题</title>
    <link href="http://kingiol.github.io/2014/04/13/fix-uitabbar-selectedimage-scale/"/>
    <id>http://kingiol.github.io/2014/04/13/fix-uitabbar-selectedimage-scale/</id>
    <published>2014-04-13T03:25:00.000Z</published>
    <updated>2014-04-13T03:41:26.000Z</updated>
    
    <content type="html">&lt;p&gt;最近编写的UITabbarController中发现一个奇怪的问题，就选中一个tab之后，然后你继续点击这个tab,就会发现选中的图标逐渐的变小变小，最后能够消失。&lt;/p&gt;
&lt;p&gt;修改之前的有关tabBarItem的设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *controller = [[&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[controller.tabBarItem setImageInsets:&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[controller.tabBarItem setTitle:&lt;span class=&quot;string&quot;&gt;@&quot;首页&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改之后的有关tabBarItem的设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *controller = [[&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[controller.tabBarItem setImageInsets:&lt;span class=&quot;built_in&quot;&gt;UIEdgeInsetsMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[controller.tabBarItem setTitle:&lt;span class=&quot;string&quot;&gt;@&quot;首页&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改了tabBarItem的图片显示模式imageInsets就可以避免问题了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近编写的UITabbarController中发现一个奇怪的问题，就选中一个tab之后，然后你继续点击这个tab,就会发现选中的图标逐渐的变小变小，最后能够消失。&lt;/p&gt;
&lt;p&gt;修改之前的有关tabBarItem的设置:&lt;/p&gt;
&lt;figure class=&quot;highli
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>改变UITabBar的背景色</title>
    <link href="http://kingiol.github.io/2014/04/12/change-uitabbar-background/"/>
    <id>http://kingiol.github.io/2014/04/12/change-uitabbar-background/</id>
    <published>2014-04-12T12:16:00.000Z</published>
    <updated>2014-04-12T12:28:02.000Z</updated>
    
    <content type="html">&lt;p&gt;默认的UITabBar的背景色是黑色的，我们有的时候需要设置一些自定的颜色，来达到自定义的要求，下面就来说说在iOS6和iOS7中如果进行设置的，下面设置背景色为白色:&lt;/p&gt;
&lt;h4 id=&quot;iOS6&quot;&gt;&lt;a href=&quot;#iOS6&quot; class=&quot;headerlink&quot; title=&quot;iOS6&quot;&gt;&lt;/a&gt;iOS6&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; rect = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f, &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIGraphicsBeginImageContext&lt;/span&gt;(rect.size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGContextRef&lt;/span&gt; context = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGContextSetFillColorWithColor&lt;/span&gt;(context, [[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor] &lt;span class=&quot;built_in&quot;&gt;CGColor&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;CGContextFillRect&lt;/span&gt;(context, rect);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tabBar.backgroundImage = image;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;iOS7&quot;&gt;&lt;a href=&quot;#iOS7&quot; class=&quot;headerlink&quot; title=&quot;iOS7&quot;&gt;&lt;/a&gt;iOS7&lt;/h4&gt;&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *bgView = [[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tabBar.bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bgView.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tabBar insertSubview:bgView atIndex:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tabBar.opaque = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;默认的UITabBar的背景色是黑色的，我们有的时候需要设置一些自定的颜色，来达到自定义的要求，下面就来说说在iOS6和iOS7中如果进行设置的，下面设置背景色为白色:&lt;/p&gt;
&lt;h4 id=&quot;iOS6&quot;&gt;&lt;a href=&quot;#iOS6&quot; class=&quot;headerlink&quot;
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>注册个人版苹果开发者须知</title>
    <link href="http://kingiol.github.io/2014/02/26/enroll-apple-developer-note/"/>
    <id>http://kingiol.github.io/2014/02/26/enroll-apple-developer-note/</id>
    <published>2014-02-26T09:25:00.000Z</published>
    <updated>2014-02-26T09:41:45.000Z</updated>
    
    <content type="html">&lt;p&gt;最近，注册个人开发者账号，前面的注册流程网上一大推，我在这里就不再重复了。&lt;/p&gt;
&lt;p&gt;首先说说注册前，需要注意的地方:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要访问appleid.apple.com对自己的账号中的地址信息进行修改，修改成你自己身份证上面的地址.&lt;/li&gt;
&lt;li&gt;如果你的appleid已经加入到别的team里面的话，那么很抱歉，你需要使用一个新的appleid进行注册开发者计划。(或者可以从原来的team中移除，然后可以继续注册)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面来说说我的情况：&lt;/p&gt;
&lt;p&gt;我的appleid已经加入到公司的team中了，然后我再用这个账号注册了开发者计划，在激活的时候，激活页面始终无法正常的打开，电话咨询客服人员，然后客服发来一个链接:developer.apple.com/membercenter/uploadDocs.action,要求我上传身份证的信息。然后我打开这个页面，登陆进去，还是无法打开页面，显示:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This page cannot be viewed.&lt;/p&gt;
&lt;p&gt;we’re unable to process your request due to an unknown error. &lt;/p&gt;
&lt;p&gt;If you require assistance, please contact Apple Developer Support.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;img src=&quot;/images/2014/02/26/enroll-apple-developer-note-0.png&quot;&gt;
&lt;p&gt;希望你们在注册的时候能够比较的顺利。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近，注册个人开发者账号，前面的注册流程网上一大推，我在这里就不再重复了。&lt;/p&gt;
&lt;p&gt;首先说说注册前，需要注意的地方:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;需要访问appleid.apple.com对自己的账号中的地址信息进行修改，修改成你自己身份证上面的地址.&lt;/li&gt;
&lt;li
    
    </summary>
    
      <category term="iOS" scheme="http://kingiol.github.io/categories/iOS/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 23 :: Multipeer Connectivity</title>
    <link href="http://kingiol.github.io/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity/"/>
    <id>http://kingiol.github.io/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity/</id>
    <published>2014-01-26T07:44:00.000Z</published>
    <updated>2014-01-27T02:00:41.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introducation-介绍&quot;&gt;&lt;a href=&quot;#Introducation-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introducation - 介绍&quot;&gt;&lt;/a&gt;Introducation - 介绍&lt;/h3&gt;&lt;p&gt;在iOS7中介绍了一个全新的框架 MultipeerConnectivity。这个是代表这传统苹果中第一个困难问题:考虑到移动设备都有多种不同的无线电技术建成的,当然,他们应该能够相互通信而无需通过互联网发送数据。在过去就可以创建一个特别的wifi网络,在蓝牙或对设备,但这些选项提供了一个非常友好的方法。伴随MultipeerConnectivity框架的变化——设置网络脱离用户和开发人员,通过与技术无关的API,而通信发生。&lt;/p&gt;
&lt;p&gt;框架在现实中无论技术具备——无论是蓝牙,或wifi,要么使用基础设施网络,或特别的网络如果设备不共享相同的网络。这是真正的,用户就可以选择它周围的设备希望连接到框架将处理所有的休息。甚至能够使用一个节点作为一个路由器2节点之间相互看不到mesh-network的方式。&lt;/p&gt;
&lt;p&gt;在今天的帖子里,我们会通过代码的运行需要建立一个multipeer这样的网络,以及如何在设备之间发送数据。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Browsing-for-devices-查找浏览设备&quot;&gt;&lt;a href=&quot;#Browsing-for-devices-查找浏览设备&quot; class=&quot;headerlink&quot; title=&quot;Browsing for devices - 查找浏览设备&quot;&gt;&lt;/a&gt;Browsing for devices - 查找浏览设备&lt;/h3&gt;&lt;p&gt;为了发送数据,有必要建立一个设备之间的连接,这是完成一个设备“浏览”适当的设备范围内。可以请求发送到这些设备之一,它将提醒用户,允许他们接受或拒绝连接。如果连接被接受,那么框架将建立链接,允许数据被转移。&lt;/p&gt;
&lt;p&gt;有2种方法可以浏览本地设备——一个视觉的,和一个可编程的版本。我们只是去看看视觉的方法。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;multipeer网络中的所有节点必须有一个ID——这是由MCPeerID类:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_peerID = [[MCPeerID alloc] initWithDisplayName:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.peerNameTextField.text];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们允许用户输入一个名称将用于识别用户试图收集装置。&lt;/p&gt;
&lt;p&gt;MCSession对象是用来协调同事之间发送数据在该会话。我们首先创建一个,然后添加同行:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_session = [[MCSession alloc] initWithPeer:_peerID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_session.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;MCSession委托财产采用MCSessionDelegate协议。这包括方法监测同行改变状态(如断开),以及方法,对等网络中的启动时被调用的数据传输。&lt;/p&gt;
&lt;p&gt;为了同伴添加到会话有ViewController子类提供了一个列表,本地设备的用户,并允许他们选择他们想建立一个连接。我们创建一个,然后将其归纳为一个模态视图控制器:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;MCBrowserViewController *browserVC = [[MCBrowserViewController alloc] initWithServiceType:&lt;span class=&quot;string&quot;&gt;@&quot;shinobi-stream&quot;&lt;/span&gt; session:_session];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;browserVC.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:browserVC animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;serviceType参数是一个字符串代表我们试图连接到的服务。这个字符串可以包含小写字母,数字和连字符,应该hi 类似于bonjour域。&lt;/p&gt;
&lt;p&gt;我们再次分配委托——这一次采用MCBrowserViewControllerDelegate协议。有两个方法,我们需要为完成和实现——取消浏览器视图控制器。这里我们将把浏览器和启用按钮,如果我们成功:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - MCBrowserViewControllerDelegate methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)browserViewControllerWasCancelled:(MCBrowserViewController *)browserViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [browserViewController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)browserViewControllerDidFinish:(MCBrowserViewController *)browserViewController&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [browserViewController dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.takePhotoButton.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们运行应用程序在这一点上我们可以输入一个同伴的名字,然后打开浏览器搜索其他设备。在这个阶段我们不没有其他设备实现广告的功能,所以我们不能连接到任何东西。这在下一节中,我们会执行下面的图片显示了连接过程,如果我们有一个设备连接,连接被接受:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-0.jpg&quot; width=&quot;260&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-1.png&quot; width=&quot;260&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-2.png&quot; width=&quot;260&quot;&gt;
&lt;h3 id=&quot;Advertising-avaiability-广告可用性&quot;&gt;&lt;a href=&quot;#Advertising-avaiability-广告可用性&quot; class=&quot;headerlink&quot; title=&quot;Advertising avaiability - 广告可用性&quot;&gt;&lt;/a&gt;Advertising avaiability - 广告可用性&lt;/h3&gt;&lt;p&gt;广告通过MCAdvertiserAssistant类可用性成为可能,这既要负责管理网络层,并向用户呈现一个警告的让他们接受或拒绝传入的连接。&lt;/p&gt;
&lt;p&gt;以同样的方式,我们需要一个会话和同行ID来浏览,我们需要他们的广告,所以我们允许用户指定一个字符串用作对等名称:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_peerID = [[MCPeerID alloc] initWithDisplayName:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.peerNameTextField.text];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_session = [[MCSession alloc] initWithPeer:_peerID];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_session.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_advertiserAssistant = [[M&lt;span class=&quot;built_in&quot;&gt;CAdvertiserAssistant&lt;/span&gt; alloc] initWithServiceType:&lt;span class=&quot;string&quot;&gt;@&quot;shinobi-stream&quot;&lt;/span&gt; discoveryInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; session:_session];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用相同的字符串serviceType参数是在浏览器中——这将使与适当的连接。 　　 　　&lt;/p&gt;
&lt;p&gt;最后,我们需要开始广告我们的可用性:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[_advertiserAssistant start];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们现在启动浏览器在一个设备,然后广告商在另一个他们应该能够找到彼此。当设备出现在浏览器,用户水龙头,然后用广告设备用户将看到一个警告让他们选择是否连接:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-3.png&quot;&gt;
&lt;h3 id=&quot;Sending-Data-发送数据&quot;&gt;&lt;a href=&quot;#Sending-Data-发送数据&quot; class=&quot;headerlink&quot; title=&quot;Sending Data - 发送数据&quot;&gt;&lt;/a&gt;Sending Data - 发送数据&lt;/h3&gt;&lt;p&gt;有三个方法可以通过multipeer网络传输数据,我们建立了——一个NSData对象,一个NSStream或发送一个基于文件的资源。所有这三个共享一个共同的范式——MCSession对象发起这些转移的方法,然后在接收端将会话调用适当的代表方法。&lt;/p&gt;
&lt;p&gt;例如,我们要拍照与一个设备,然后让它自动显示在屏幕上的其他设备。我们将使用NSData方法对于这个示例,但每个人的方法非常相似。&lt;/p&gt;
&lt;p&gt;我们使用UIImagePickerController简单的照片&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImagePickerController&lt;/span&gt; *imagePicker = [&lt;span class=&quot;built_in&quot;&gt;UIImagePickerController&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imagePicker.sourceType = &lt;span class=&quot;built_in&quot;&gt;UIImagePickerControllerSourceTypeCamera&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;imagePicker.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; presentViewController:imagePicker animated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并实现以下委托方法获得预想的照片:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)imagePickerController:(&lt;span class=&quot;built_in&quot;&gt;UIImagePickerController&lt;/span&gt; *)picker didFinishPickingMediaWithInfo:(&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)info&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *photo = info[&lt;span class=&quot;built_in&quot;&gt;UIImagePickerControllerOriginalImage&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *smallerPhoto = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; rescaleImage:photo toSize:&lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;800&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;600&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *jpeg = &lt;span class=&quot;built_in&quot;&gt;UIImageJPEGRepresentation&lt;/span&gt;(smallerPhoto, &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_session sendData:jpeg toPeers:[_session connectedPeers] withMode:MCSessionSendDataReliable error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们感兴趣的是MCSession对象调用sendData:toPeers:withMode:error:方法。这可以采取一个NSDataobject网络中并将其发送到其他同行。在这里我们选择寄给所有的同事网络。模式允许您选择要传输的数据是否可靠。如果您选择可靠然后肯定会到达的消息,将会以正确的顺序,但将有一个更高的时间开销。使用不可靠的模式意味着一些消息可能会丢失,但延误将会小得多。&lt;/p&gt;
&lt;p&gt;接受其他设备上的数据我们只是为正确的代表提供一个适当的实现方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)session:(MCSession *)session didReceiveData:(&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *)data fromPeer:(MCPeerID *)peerID&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWithData:data];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.image = image;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.contentScaleFactor = &lt;span class=&quot;built_in&quot;&gt;UIViewContentModeScaleAspectFill&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们简单地创建一个从NSData UIImage对象,然后设置UIImageView的形象。以下图片显示这张照片上一个设备,然后显示在另一个问题:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-4.png&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day23-multipeer-connectivity-5.png&quot; width=&quot;350&quot;&gt;
&lt;p&gt;流和资源API几乎以相同的方式工作,虽然资源API提供了异步更新进展,因此更适用于大型数据传输。&lt;/p&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;MultipeerConnectivity框架非常强大,是类似的概念抽象的技术细节的开发人员。很明显,出现的新的空投功能iOS7是建立在这个框架,非常的冰山一角的可以使用这个框架构建。想象一个iBeacon,当你靠近它时,不仅会通知你的,然后给你发送信息不使用互联网。也许你可以多角度的视频到你的设备在一个体育赛事,但只有如果你在会场?我等不及要看别人怎么构建!&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/22/ios7-day-by-day-day-23-multipeer-connectivity&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 23 :: Multipeer Connectivity&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introducation-介绍&quot;&gt;&lt;a href=&quot;#Introducation-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introducation - 介绍&quot;&gt;&lt;/a&gt;Introducation - 介绍&lt;/h3&gt;&lt;p&gt;在iOS7中介绍了一个全新的框架 MultipeerConnectivity。这个是代表这传统苹果中第一个困难问题:考虑到移动设备都有多种不同的无线电技术建成的,当然,他们应该能够相互通信而无需通过互联网发送数据。在过去就可以创建一个特别的wifi网络,在蓝牙或对设备,但这些选项提供了一个非常友好的方法。伴随MultipeerConnectivity框架的变化——设置网络脱离用户和开发人员,通过与技术无关的API,而通信发生。&lt;/p&gt;
&lt;p&gt;框架在现实中无论技术具备——无论是蓝牙,或wifi,要么使用基础设施网络,或特别的网络如果设备不共享相同的网络。这是真正的,用户就可以选择它周围的设备希望连接到框架将处理所有的休息。甚至能够使用一个节点作为一个路由器2节点之间相互看不到mesh-network的方式。&lt;/p&gt;
&lt;p&gt;在今天的帖子里,我们会通过代码的运行需要建立一个multipeer这样的网络,以及如何在设备之间发送数据。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Browsing-for-devices-查找浏览设备&quot;&gt;&lt;a href=&quot;#Browsing-for-devices-查找浏览设备&quot; class=&quot;headerlink&quot; title=&quot;Browsing for devices - 查找浏览设备&quot;&gt;&lt;/a&gt;Browsing for devices - 查找浏览设备&lt;/h3&gt;&lt;p&gt;为了发送数据,有必要建立一个设备之间的连接,这是完成一个设备“浏览”适当的设备范围内。可以请求发送到这些设备之一,它将提醒用户,允许他们接受或拒绝连接。如果连接被接受,那么框架将建立链接,允许数据被转移。&lt;/p&gt;
&lt;p&gt;有2种方法可以浏览本地设备——一个视觉的,和一个可编程的版本。我们只是去看看视觉的方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 22 :: Downloadable Fonts</title>
    <link href="http://kingiol.github.io/2014/01/26/ios7-day-by-day-day22-downloadable-fonts/"/>
    <id>http://kingiol.github.io/2014/01/26/ios7-day-by-day-day22-downloadable-fonts/</id>
    <published>2014-01-26T05:16:00.000Z</published>
    <updated>2014-01-26T07:40:01.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;在iOS中就预先安装了一些字体，但是这并不是完整的。为了能够节省磁盘的映射空间，iOS提供了一种机制用来下载和在运行的时候使用字体。&lt;/p&gt;
&lt;p&gt;苹果提供了一组字体，它们可以被许可使用，包括非罗马字体，和一系列在桌面应用程序的字体。从iOS6开始，字体下载的功能已经能够使用了，但是在iOS7中，有一个更加大的字体列表可供使用.&lt;/p&gt;
&lt;p&gt;下载字体存储在系统的某个地方——作为一个应用程序开发者，我们并没有权限去访问字体的存储空间。你需要用到的字体有可能已经被另外的程序请求下载了。然而，如果不是这样的话，而且用户也没有网络连接的情况下，所以我们的字体是不可用的。或者当有一个延迟的请求下载字体——我们等到字体可用的时候进行切换？&lt;/p&gt;
&lt;p&gt;首先，我们需要在验证下载使用指定字体之前查看如何得到字体的列表，&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Listing-available-fonts&quot;&gt;&lt;a href=&quot;#Listing-available-fonts&quot; class=&quot;headerlink&quot; title=&quot;Listing available fonts&quot;&gt;&lt;/a&gt;Listing available fonts&lt;/h3&gt;&lt;p&gt;下载字体的API并不是&lt;code&gt;TextKit&lt;/code&gt;的一部分，而是在底层的&lt;code&gt;CoreText&lt;/code&gt;中。这也就是意味着而不是处理Cocoa对象，我们可以看到许多CoreFoundation对象，然后我们可以进行免费的桥接来让生活变得更加的美好。&lt;/p&gt;
&lt;p&gt;我们需要使用&lt;code&gt;CoreText&lt;/code&gt;中的这个功能&lt;code&gt;CTFontDescriptorCreateMatchingFontDescriptiors&lt;/code&gt;,然后我们用它来匹配一个属性&lt;code&gt;kCTFontDownloadableAttribute&lt;/code&gt;，这个属性用来表示哪些字体是否可供下载的。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *descriptorOptions = @&amp;#123;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)kCTFontDownloadableAttribute: @YES&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CTFontDescriptorRef descriptor = CTFontDescriptorCreateWithAttributes((&lt;span class=&quot;built_in&quot;&gt;CFDictionaryRef&lt;/span&gt;)descriptorOptions);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CFArrayRef&lt;/span&gt; fontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors(descriptor, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一行，我们创建一个描述属性的NSDictionary——这里我们只指定了我们感兴趣的就是是否能够下载(downloadable).然后使用这个字典来创建一个&lt;code&gt;CTFontDescriptorRef&lt;/code&gt;——需要注意的就是在这里我们需要把&lt;code&gt;NSDictionary&lt;/code&gt;转成&lt;code&gt;CFDictionaryRef&lt;/code&gt;类型——确保通用的桥接模式。最后我们调用一个可以提供给我们符合匹配描述字体的列表。&lt;/p&gt;
&lt;p&gt;对于最后一个方法是阻塞的，并且可能需要ige网络的访问，所以我们将会在&lt;code&gt;requestDownloadableFontList&lt;/code&gt;方法中进行调用:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)requestDownloadableFontList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *descriptorOptions = @&amp;#123;(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)kCTFontDownloadableAttribute: @YES&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		CTFontDescriptorRef descriptor = CTFontDescriptorCreateWithAttributes((&lt;span class=&quot;built_in&quot;&gt;CFDictionaryRef&lt;/span&gt;)descriptorOptions);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;CFArrayRef&lt;/span&gt; fontDescriptors = CTFontDescriptorCreateMatchingFontDescriptors(descriptor, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(diapatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; fontListDownloadComplete:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;CFBridgingRelese&lt;/span&gt;(fontDescriptors)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Need to release the font descriptor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;CFRelease&lt;/span&gt;(descriptor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;附带的示例应用程序是一个表格视图,我们现在这些结果第一级显示字体名称。点击其中一个展示一个新的tableview导航控制器显示的所有字体。因此,在顶层,我们fontDownloadListComplete实现以下方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)fontListDownloadComplete:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)fontList &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Need to reorganise array into dictionary&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; *fontFamilies = [&lt;span class=&quot;built_in&quot;&gt;NSMutableDictionary&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; *descriptor &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; fontList) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fontFamilyName = [descriptor objectForKey:&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptorFamilyAttribute&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *fontDescriptor = [fontFamilies objectForKey:fontFamilyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fontDescriptors) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fontDescriptors = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[fontFamilies setObject:fontDescriptors forKey:fontFamilyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[fontDescriptors addObject:desciptor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_fontList = [fontFamilies &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView reloadData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们只是重组字体描述符数组变成一个字典,按照字体家族进行分类。我们这里使用&lt;code&gt;UIFontDescriptor&lt;/code&gt;来等级代替&lt;code&gt;CTFontDescriptorRef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;一旦我们归类正确的数据,我们可以重新加载表。设置了tableview数据源,在viewDidLoad中:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title = &lt;span class=&quot;string&quot;&gt;@&quot;Families&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; requestDownloadableFontList];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们运行程序之后就可以看到导航控制器是这个样子的.&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-0.jpg&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-1.png&quot; width=&quot;350&quot;&gt;
&lt;p&gt;下一个级别是在导航控制器中指定一个字体的家族，所以，我们需要创建一个NSArray属性来包含字体描述符的集合。我们把这些写在&lt;code&gt;prepareForSegue:&lt;/code&gt;方法中:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForSegue:(&lt;span class=&quot;built_in&quot;&gt;UIStoryboardSegue&lt;/span&gt; *)segue sender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([[segue identifier] isEqualToString:&lt;span class=&quot;string&quot;&gt;@&quot;ShowFamily&quot;&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        S&lt;span class=&quot;built_in&quot;&gt;CFontViewController&lt;/span&gt; *vc = [segue destinationViewController];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *indexPath = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView indexPathForSelectedRow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fontFamilyName = [_fontList allKeys][indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *fontList = _fontList[fontFamilyName];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vc.fontList = fontList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vc.title = fontFamilyName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行程序，然后进入到第二级别中就可以看到如下的表示:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-2.png&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-3.png&quot; width=&quot;350&quot;&gt;
&lt;h3 id=&quot;Downloading-a-font-下载字体&quot;&gt;&lt;a href=&quot;#Downloading-a-font-下载字体&quot; class=&quot;headerlink&quot; title=&quot;Downloading a font - 下载字体&quot;&gt;&lt;/a&gt;Downloading a font - 下载字体&lt;/h3&gt;&lt;p&gt;在最后一个阶段，如果这个字体可用的话，程序就显示这个字体到底看起来是什么样子的。否则就需要自己触发进行下载。&lt;/p&gt;
&lt;p&gt;下载的操作对应于&lt;code&gt;handleDownloadPressed:&lt;/code&gt;方法，这个功能中我们感兴趣的是&lt;code&gt;CTFontDescriptorMatchFontDescriptorsWithProgressHandler&lt;/code&gt;.如果下载字体就需要一个CFArrayRef字体的描述符。它需要一块作为参数提供更新的用户。该方法立即返回,在后台队列上执行操作。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;)handleDownloadPressed:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.downloadProgressBar.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CTFontDescriptorMatchFontDescriptorsWithProgressHandler((&lt;span class=&quot;built_in&quot;&gt;CFArrayRef&lt;/span&gt;)@[_fontDescriptor],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ^&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;(CTFontDescriptorMatchingState state, &lt;span class=&quot;built_in&quot;&gt;CFDictionaryRef&lt;/span&gt; progressParameter) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt; progressValue = [[(__bridge &lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *)progressParameter objectForKey:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)kCTFontDescriptorMatchingPercentage] doubleValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (state == kCTFontDescriptorMatchingDidFinish) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.downloadProgressBar.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; updateView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.downloadProgressBar.progress = progressValue;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;bool&lt;/span&gt;)&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在执行块中，我们提取当前进度的百分比，然后更新进度条。如果state表明当前的下载已经完成，则我们调用updateView.这个方法我们创建用来加载字体的简单字形内容。注意的一点，我们需要在主线程上面更新UI的内容。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)updateView&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *fontName = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.fontDescriptor objectForKey:&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptorNameAttribute&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.title = fontName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; *font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; fontWithName:fontName size:&lt;span class=&quot;number&quot;&gt;26.&lt;/span&gt;f];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(font &amp;amp;&amp;amp; [font.fontName isEqualToString:fontName]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.sampleTextLabel.font = font;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.downloadButton.enabled = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.detailDescriptionLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Font available&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.sampleTextLabel.font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; systemFontOfSize:font.pointSize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.downloadButton.enabled = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.detailDescriptionLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;This font is not yet downloaded&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行应用程序，现在你就看可以浏览苹果提供的可用的字体列表，并且可以下载它们:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-4.jpg&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-5.jpg&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-6.jpg&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/26/ios7-day-by-day-day22-downloadable-fonts-7.jpg&quot; width=&quot;350&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;下载的字体是一个方便的功能,将允许您定制你的应用程序的外观,而无需许可字体。然而,重要的是要确保你处理用户没有网络连接的情况下,默认字体应该使用什么。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/21/ios7-day-by-day-day-22-downloadable-fonts&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 22 :: Downloadable Fonts&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;在iOS中就预先安装了一些字体，但是这并不是完整的。为了能够节省磁盘的映射空间，iOS提供了一种机制用来下载和在运行的时候使用字体。&lt;/p&gt;
&lt;p&gt;苹果提供了一组字体，它们可以被许可使用，包括非罗马字体，和一系列在桌面应用程序的字体。从iOS6开始，字体下载的功能已经能够使用了，但是在iOS7中，有一个更加大的字体列表可供使用.&lt;/p&gt;
&lt;p&gt;下载字体存储在系统的某个地方——作为一个应用程序开发者，我们并没有权限去访问字体的存储空间。你需要用到的字体有可能已经被另外的程序请求下载了。然而，如果不是这样的话，而且用户也没有网络连接的情况下，所以我们的字体是不可用的。或者当有一个延迟的请求下载字体——我们等到字体可用的时候进行切换？&lt;/p&gt;
&lt;p&gt;首先，我们需要在验证下载使用指定字体之前查看如何得到字体的列表，&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 21 :: Multi-column TextKit text rendering</title>
    <link href="http://kingiol.github.io/2014/01/25/ios7-day-by-day-day21-multi-column-textkit-text-rendering/"/>
    <id>http://kingiol.github.io/2014/01/25/ios7-day-by-day-day21-multi-column-textkit-text-rendering/</id>
    <published>2014-01-25T14:03:00.000Z</published>
    <updated>2014-01-26T03:53:13.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;p&gt;在过去，要想在iOS中创建多列的布局的文字是十分困难的:可能你可以创建多个&lt;code&gt;UITextView&lt;/code&gt;然后手动剪裁文字来填充到不同的视图中，如果是动态内容的话就悲剧了，或者你可以调用更加底层的&lt;code&gt;CoreText&lt;/code&gt;布局引擎，但是这个并不是那么容易使用的。&lt;/p&gt;
&lt;p&gt;在iOS7中有关&lt;code&gt;TextKit&lt;/code&gt;的介绍就改变了这些，并且它变得很易用，可以用来创建不同的文字排版，包括多页，多列和禁区。在今天的文章中我们将会看查查如果使用它来构建一个多列的文字展示，它渲染成一个简单的文本文件。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TextKit&quot;&gt;&lt;a href=&quot;#TextKit&quot; class=&quot;headerlink&quot; title=&quot;TextKit&quot;&gt;&lt;/a&gt;TextKit&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TextKit&lt;/code&gt;是一个巨大的框架，在今天的文章中，我们并不会去详细的解释它全部的东西，为了能够弄懂多列的排版项目，其中有4个类我们会很熟悉的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;NSTextStorage: 是NSAttributedString的子类，并且包含了内容和我们希望渲染的标记的文本。它使编辑和保存相关布局管理器的引用来通知底层的文本存储。&lt;/li&gt;
&lt;li&gt;NSLayoutManager: 代表管理渲染存储中的文本在一个或者多个容器对象中。把底层的unicode字符转换成图形。可以有多个文本容器允许不同地区之间流动的文本。&lt;/li&gt;
&lt;li&gt;NSTextContainer: 定义当前要渲染文本的所有区域。这是提供的字形布局管理器,它指定填充该区域。可以使用UIBezierPath对象作为禁区。&lt;/li&gt;
&lt;li&gt;UITextView: 真实的渲染文本到屏幕上面。在iOS7中它有所更新，添加了一个&lt;code&gt;NSTextContainer&lt;/code&gt;的构造。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们将会使用这些类来创建多列的文本视图。如果你要更深入的获得有关&lt;code&gt;TextKit&lt;/code&gt;的架构信息并且如何来使用，可以查看&lt;a href=&quot;http://www.raywenderlich.com/50151/text-kit-tutorial&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TextKit Tutorial&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Multiple-Columns&quot;&gt;&lt;a href=&quot;#Multiple-Columns&quot; class=&quot;headerlink&quot; title=&quot;Multiple Columns&quot;&gt;&lt;/a&gt;Multiple Columns&lt;/h3&gt;&lt;p&gt;我们将会把所有的代码放到一个试图控制器中，所以需要很多的实例变量来表示文本存储和布局管理器:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCViewController&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLayoutManager&lt;/span&gt; *_layoutManager;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSTextStorage&lt;/span&gt; *_textStorage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将会在&lt;code&gt;viewDidLoad&lt;/code&gt;中具体的创建他们，首先，我们需要先看一下文本存储，我们在资源文件中有一个.txt的文件，它包含了一些文本信息.由于&lt;code&gt;NSTextStorage&lt;/code&gt;是&lt;code&gt;NSAttributeString&lt;/code&gt;的子类，所以我们可以运用这个方法&lt;code&gt;initWithFileURL:options:documentAttributes:error&lt;/code&gt;进行构造:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Import the content into a text storage object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSURL&lt;/span&gt; *contentURL = [[&lt;span class=&quot;built_in&quot;&gt;NSBundle&lt;/span&gt; mainBundle] URLForResource:&lt;span class=&quot;string&quot;&gt;@&quot;content&quot;&lt;/span&gt; withExtension:&lt;span class=&quot;string&quot;&gt;@&quot;txt&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_textStorage = [[&lt;span class=&quot;built_in&quot;&gt;NSTextStorage&lt;/span&gt; alloc] initWithFileURL:contentURL options:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt; documentAttributes:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; error:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建一个简单的布局管理器:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Create a layout manager&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_layoutManager = [[&lt;span class=&quot;built_in&quot;&gt;NSLayoutManager&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_textStorage addLayoutManager:_layoutManager];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Layout the text containers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; layoutTextContainers];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦我们创建了&lt;code&gt;_layoutManager&lt;/code&gt;,我们把它添加到&lt;code&gt;_textStorage&lt;/code&gt;中。它不仅仅是提供了文本内容的布局管理器，还如果底层的文本改变了布局控制器将会得到相应的通知。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;viewDidLoad&lt;/code&gt;方法的最后我们调用了&lt;code&gt;layoutTextContainers&lt;/code&gt;方法，它是一个工具类方法，我们现在来具体介绍。&lt;/p&gt;
&lt;p&gt;我们来循环每个列，创建新的&lt;code&gt;NSTextContainer&lt;/code&gt;来指定文本的大小，然后使用屏幕上面的&lt;code&gt;UITextView&lt;/code&gt;进行渲染它。循环体如下所示:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; lastRenderedGlyph = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGFLoat&lt;/span&gt; currentXOffset = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (lastRenderedGlyph &amp;lt; _layoutManager.numberOfGlyphs) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//	Need to update the scrollView size&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt; contentSize = &lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(currentXOffset, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView.bounds));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView.contentSize = contentSize;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们设置了一些变量——其中一个代表了循环终止(lastRenderdGlyph),还有一个存储了当前列的X轴偏移。&lt;code&gt;NSLayoutManager&lt;/code&gt;有一个属性，它包含了所有字形的总数，所以我们需要循环知道我们已经绘制出来为止。&lt;/p&gt;
&lt;p&gt;当循环完成之后，我们需要计算出当前内容的的正确大小，然后对scrollView进行设置，所以我们才能够像预期一样移动页数。&lt;/p&gt;
&lt;p&gt;在循环体中，首先，我们需要计算出当前列的大小:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; textViewFrame = &lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(currentXOffset, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds) - &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGSize&lt;/span&gt; columnSize = &lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(textViewFrame) - &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(textViewFrame) - &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们设置列为接近根视图的高，宽为根视图的一半。&lt;/p&gt;
&lt;p&gt;现在我们可以创建一个&lt;code&gt;NSTextContainer&lt;/code&gt;来对列区域中的字形进行布局。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSTextContainer&lt;/span&gt; *textContainer = [[&lt;span class=&quot;built_in&quot;&gt;NSTextContainer&lt;/span&gt; alloc] initWithSize:columnSize];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_layoutManager addTextContainer:textContainer];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同事我们还需要把文本容器添加到布局管理器中。这就确保了容器提供有序列的字形来渲染展示。&lt;/p&gt;
&lt;p&gt;为了获得容器来呈现在屏幕上面，我们需要创建一个&lt;code&gt;UITextView&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// And a text view to render it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UITextView&lt;/span&gt; *textView = [[&lt;span class=&quot;built_in&quot;&gt;UITextView&lt;/span&gt; alloc] initWithFrame:textViewFrame textContainer:textContainer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;textView.scrollEnabled = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scrollView addSubview:textView];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们指定了text view的容器。&lt;/p&gt;
&lt;p&gt;最后我们需要更新追踪最后的呈现字形的变量和当前列的位置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Increse the current offset&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;currentXOffset += &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(textViewFrame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// And find the index of the glyph we&#39;ve just rendered&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;lastRenderedGlyph = &lt;span class=&quot;built_in&quot;&gt;NSMaxRange&lt;/span&gt;([_layoutManager glyphRangeForTextContainer:textContainer]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到这里就完成了，可能你还会有所疑惑，是的，它趋势完成了，如果你运行应用程序就会看到下面的呈现效果。&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day21-multi-column-textkit-text-rendering-0.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day21-multi-column-textkit-text-rendering-1.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day21-multi-column-textkit-text-rendering-2.png&quot; width=&quot;250&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;在iOS7中，&lt;code&gt;TextKit&lt;/code&gt;是一个主要的附加功能，并且它代表了一些非常强大的功能。我今天只是很简单的介绍了如果简单的使用.我鼓励您进一步调查TextKit如果你显示任何多少量的文本——实际上,这是一个新领域的iOS7,用在制作不错的文档。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/18/ios7-day-by-day-day-21-multi-column-textkit-text-rendering&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 21 :: Multi-column TextKit text rendering&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;p&gt;在过去，要想在iOS中创建多列的布局的文字是十分困难的:可能你可以创建多个&lt;code&gt;UITextView&lt;/code&gt;然后手动剪裁文字来填充到不同的视图中，如果是动态内容的话就悲剧了，或者你可以调用更加底层的&lt;code&gt;CoreText&lt;/code&gt;布局引擎，但是这个并不是那么容易使用的。&lt;/p&gt;
&lt;p&gt;在iOS7中有关&lt;code&gt;TextKit&lt;/code&gt;的介绍就改变了这些，并且它变得很易用，可以用来创建不同的文字排版，包括多页，多列和禁区。在今天的文章中我们将会看查查如果使用它来构建一个多列的文字展示，它渲染成一个简单的文本文件。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;TextKit&quot;&gt;&lt;a href=&quot;#TextKit&quot; class=&quot;headerlink&quot; title=&quot;TextKit&quot;&gt;&lt;/a&gt;TextKit&lt;/h3&gt;&lt;p&gt;&lt;code&gt;TextKit&lt;/code&gt;是一个巨大的框架，在今天的文章中，我们并不会去详细的解释它全部的东西，为了能够弄懂多列的排版项目，其中有4个类我们会很熟悉的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;NSTextStorage: 是NSAttributedString的子类，并且包含了内容和我们希望渲染的标记的文本。它使编辑和保存相关布局管理器的引用来通知底层的文本存储。&lt;/li&gt;
&lt;li&gt;NSLayoutManager: 代表管理渲染存储中的文本在一个或者多个容器对象中。把底层的unicode字符转换成图形。可以有多个文本容器允许不同地区之间流动的文本。&lt;/li&gt;
&lt;li&gt;NSTextContainer: 定义当前要渲染文本的所有区域。这是提供的字形布局管理器,它指定填充该区域。可以使用UIBezierPath对象作为禁区。&lt;/li&gt;
&lt;li&gt;UITextView: 真实的渲染文本到屏幕上面。在iOS7中它有所更新，添加了一个&lt;code&gt;NSTextContainer&lt;/code&gt;的构造。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们将会使用这些类来创建多列的文本视图。如果你要更深入的获得有关&lt;code&gt;TextKit&lt;/code&gt;的架构信息并且如何来使用，可以查看&lt;a href=&quot;http://www.raywenderlich.com/50151/text-kit-tutorial&quot;&gt;TextKit Tutorial&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 20 :: View controller content and navigation bars</title>
    <link href="http://kingiol.github.io/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars/"/>
    <id>http://kingiol.github.io/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars/</id>
    <published>2014-01-25T07:32:00.000Z</published>
    <updated>2014-01-25T14:56:58.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;今天的这篇文章将会和之前的文章有些小小的不同。采用iOS7依赖，许多开发者都在处理视图控制器在&lt;code&gt;UINavigationControllers&lt;/code&gt;的navigation bar后面的问题。我们将要来看看为什么，然后视图解释如何获得自己所需要的行为.&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;iOS7-View-Controller-Changes-The-theory-iOS7视图控制器的改变-理论部分&quot;&gt;&lt;a href=&quot;#iOS7-View-Controller-Changes-The-theory-iOS7视图控制器的改变-理论部分&quot; class=&quot;headerlink&quot; title=&quot;iOS7 View Controller Changes: The theory - iOS7视图控制器的改变:理论部分&quot;&gt;&lt;/a&gt;iOS7 View Controller Changes: The theory - iOS7视图控制器的改变:理论部分&lt;/h3&gt;&lt;p&gt;在iOS7中所有的试图控制器都是全屏的布局，这就意味着&lt;code&gt;wantsFullScreenLayout&lt;/code&gt;属性已经被弃用了。然而，我们现在有额外的方法来控制试图控制器的显示问题。下面的这些配置属性可以通过代码和interface builder来使用:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;edgesForExtendedLayout&lt;/code&gt;:这个属性定义的是视图边缘如何扩展到屏幕的边缘。默认的值是&lt;code&gt;UIRectEdgeAll&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extendedLayoutIncludesOpaqueBars&lt;/code&gt;:如果试图控制器是半透明的，默认的边缘将会扩展在bar的下面。然而设置这个属性为YES,就会让边缘扩展到不透明的bar下面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;automaticallyAdjustsScrollViewInsets&lt;/code&gt;:这个属性是非常强大的属性。如果你的视图中包含了一个滚动视图，然后它将会有自己的内容嵌入，所以自身的内容将会滚动到bar的下面，但是可以滚动看到所有的内容。这个属性默认是YES，并且这是iOS7推荐的行为。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topLayoutGuid, bottomLayoutGuide&lt;/code&gt;:这些属性将会生成匹配视图可见区域的扩展，也就是，如果有屏幕的上方有一个bar，然后&lt;code&gt;topLayoutGuide&lt;/code&gt;将会定位在底部的bar上面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;In-Practice-实践&quot;&gt;&lt;a href=&quot;#In-Practice-实践&quot; class=&quot;headerlink&quot; title=&quot;In Practice - 实践&quot;&gt;&lt;/a&gt;In Practice - 实践&lt;/h3&gt;&lt;p&gt;通过阅读上面的属性描述，我们会发现这非常简单，确实如此。在一些情况下，就会有一些迷惑。&lt;/p&gt;
&lt;h5 id=&quot;视图控制器在导航控制器之中&quot;&gt;&lt;a href=&quot;#视图控制器在导航控制器之中&quot; class=&quot;headerlink&quot; title=&quot;视图控制器在导航控制器之中&quot;&gt;&lt;/a&gt;视图控制器在导航控制器之中&lt;/h5&gt;&lt;p&gt;让我们先说一下最简单的情况：试图控制器在导航控制器中。&lt;/p&gt;
&lt;p&gt;这里我们需要正确的设置&lt;code&gt;edgesForExtendedLayout&lt;/code&gt;，否则你的视图将会出现在bar的下面。可以在interface builder中进行设置:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-0.png&quot;&gt;
&lt;p&gt;或者在代码中进行设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.edgesForExtendedLayout = &lt;span class=&quot;built_in&quot;&gt;UIRectEdgeNone&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到设置’之前’和’之后’的展现:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-1.png&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-2.png&quot; width=&quot;350&quot;&gt;
&lt;h5 id=&quot;滚动视图在导航控制器中&quot;&gt;&lt;a href=&quot;#滚动视图在导航控制器中&quot; class=&quot;headerlink&quot; title=&quot;滚动视图在导航控制器中&quot;&gt;&lt;/a&gt;滚动视图在导航控制器中&lt;/h5&gt;&lt;p&gt;我们希望在导航控制器中的滚动视图的可以能够滚动看到全部的内容，但是当你进行滚动的时候内容将会消失在bar的下面。这恰恰是&lt;code&gt;automaticallyAdjustsScrollViewInset&lt;/code&gt;要做的。当设置为NO的时候，效果如下:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-3.png&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-4.png&quot; width=&quot;350&quot;&gt;
&lt;p&gt;如果改变成YES，效果如下:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-5.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-6.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-7.png&quot; width=&quot;250&quot;&gt;
&lt;h5 id=&quot;表格视图在导航控制器中&quot;&gt;&lt;a href=&quot;#表格视图在导航控制器中&quot; class=&quot;headerlink&quot; title=&quot;表格视图在导航控制器中&quot;&gt;&lt;/a&gt;表格视图在导航控制器中&lt;/h5&gt;&lt;p&gt;&lt;code&gt;UITableView&lt;/code&gt;是&lt;code&gt;UIScrollView&lt;/code&gt;的子类，所以我们期望和上一个滚动视图相同的效果，然后我们的确需要再次设置&lt;code&gt;automaticallyAdjustsScrollViewInsets&lt;/code&gt;的属性来得到想要的行为:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-8.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-9.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-10.png&quot; width=&quot;250&quot;&gt;
&lt;h5 id=&quot;另外的一些情形&quot;&gt;&lt;a href=&quot;#另外的一些情形&quot; class=&quot;headerlink&quot; title=&quot;另外的一些情形&quot;&gt;&lt;/a&gt;另外的一些情形&lt;/h5&gt;&lt;p&gt;如果你运行今天完成的应用程序，然后你就会发现还提供了另外的一些示例——一个滚动视图在tab视图控制器中，和一个表格视图在tab视图控制器中。其中有一些原因(我认为属于bug,但是很乐意去修正…).嵌入的滚动视图并没有很好的适应导航控制器:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-11.png&quot; width=&quot;350&quot;&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day20-view-controller-content-and-navigation-bars-12.png&quot; width=&quot;350&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;事实上,所有视图控制器现在都是全屏，对于很多开发人员来说这很诡异,而且有很好的理由。周围的文档并不好,我认为可能有一个错误在滚动视图嵌入tab控制器。然而,值得玩——,而当它确实看起来相当不错。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/17/ios7-day-by-day-day-20-view-controller-content-and-navigation-bars&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 20 :: View controller content and navigation bars&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;今天的这篇文章将会和之前的文章有些小小的不同。采用iOS7依赖，许多开发者都在处理视图控制器在&lt;code&gt;UINavigationControllers&lt;/code&gt;的navigation bar后面的问题。我们将要来看看为什么，然后视图解释如何获得自己所需要的行为.&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;iOS7-View-Controller-Changes-The-theory-iOS7视图控制器的改变-理论部分&quot;&gt;&lt;a href=&quot;#iOS7-View-Controller-Changes-The-theory-iOS7视图控制器的改变-理论部分&quot; class=&quot;headerlink&quot; title=&quot;iOS7 View Controller Changes: The theory - iOS7视图控制器的改变:理论部分&quot;&gt;&lt;/a&gt;iOS7 View Controller Changes: The theory - iOS7视图控制器的改变:理论部分&lt;/h3&gt;&lt;p&gt;在iOS7中所有的试图控制器都是全屏的布局，这就意味着&lt;code&gt;wantsFullScreenLayout&lt;/code&gt;属性已经被弃用了。然而，我们现在有额外的方法来控制试图控制器的显示问题。下面的这些配置属性可以通过代码和interface builder来使用:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;edgesForExtendedLayout&lt;/code&gt;:这个属性定义的是视图边缘如何扩展到屏幕的边缘。默认的值是&lt;code&gt;UIRectEdgeAll&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;extendedLayoutIncludesOpaqueBars&lt;/code&gt;:如果试图控制器是半透明的，默认的边缘将会扩展在bar的下面。然而设置这个属性为YES,就会让边缘扩展到不透明的bar下面。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;automaticallyAdjustsScrollViewInsets&lt;/code&gt;:这个属性是非常强大的属性。如果你的视图中包含了一个滚动视图，然后它将会有自己的内容嵌入，所以自身的内容将会滚动到bar的下面，但是可以滚动看到所有的内容。这个属性默认是YES，并且这是iOS7推荐的行为。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;topLayoutGuid, bottomLayoutGuide&lt;/code&gt;:这些属性将会生成匹配视图可见区域的扩展，也就是，如果有屏幕的上方有一个bar，然后&lt;code&gt;topLayoutGuide&lt;/code&gt;将会定位在底部的bar上面。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 19 :: UITableView Row Height Estimation</title>
    <link href="http://kingiol.github.io/2014/01/25/ios7-day-by-day-day19-uitableview-row-height-estimation/"/>
    <id>http://kingiol.github.io/2014/01/25/ios7-day-by-day-day19-uitableview-row-height-estimation/</id>
    <published>2014-01-25T02:57:00.000Z</published>
    <updated>2014-01-25T07:31:29.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;今天我们将会来查看一个相当小的额外的&lt;code&gt;UIKit API&lt;/code&gt;，其中一个就是复杂的表格来影响用户体验。估算行高是在表格的代理方法中的一个额外的方法进行设置，它不仅仅可以返回默认的行高，还可以返回估算的高度来进行替换。我们将会查看为什么这属于一个高级的部分。为了能够能够验证这些，我们需要构建一个简单的应用，它里面有一个表格，可以让我们看到具有估算高度和没有估算高度的示例。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Without-estimation-没有估算&quot;&gt;&lt;a href=&quot;#Without-estimation-没有估算&quot; class=&quot;headerlink&quot; title=&quot;Without estimation - 没有估算&quot;&gt;&lt;/a&gt;Without estimation - 没有估算&lt;/h3&gt;&lt;p&gt;我们通过&lt;code&gt;UITableViewController&lt;/code&gt;来创建一个简单的&lt;code&gt;UITableView&lt;/code&gt;.它包含了一个section200行数据。没有单元包含了包含他们自己的索引和高度。如果所有的行都是具有相同高度，那么我们就不需要去实现代理中的&lt;code&gt;heightForRowAtIndexPath:&lt;/code&gt;方法,然后我们也不需要去使用新的估算方法来改善什么东西。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)numberOfSectionsInTableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Retur the number of sections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView numberOfRowsInSection:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)section &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Return the number of rows in the section.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableview cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cellIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;Cell&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier forIndexPath:indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Configure the cell...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cell.textLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Cell %03d&quot;&lt;/span&gt;, indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; heightForRowAtIndex:indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cell.detailTextLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Height %0.2f&quot;&lt;/span&gt;, height];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;其中的&lt;code&gt;heightForRowAtIndex:&lt;/code&gt;方法是一个工具类方法，它可以根据不同的索引行返回高度。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)heightForRowAtIndex:(&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt;)index &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; i &amp;lt; le5; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		result = sqrt((&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;)i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	result = (index % &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;number&quot;&gt;20.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们有一个复杂的表格，它其中的单元格具有不同的高度，所以我们需要构建单元格，让它能够自己决定自身的高度，将会要花费很长的时间。为了能够模拟这个，我们将会花费一个巨大的循环来计算-其实这并没有什么实际用途，我们只是让它来进行一些消耗时间而已。&lt;/p&gt;
&lt;p&gt;我们同样需要一个代理来返回行高，所以，我们创建一个&lt;code&gt;SCNonEstimatingTableViewDelegate:&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCNonEstimatingTableViewDelegate&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;UITableViewDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithHeightBlock:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt; index))heightBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法里面有一个块参数，用来计算具体的行高的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCNonEstimatingTableViewDelegate&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^_heightBlock)(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithHeightBlock:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt;))heightBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_heightBlock = [heightBlock &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们来实现代码相关的方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UITableViewDelegate methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView heightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Height (row %d)&quot;&lt;/span&gt;, indexPath.row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _heightBlock(indexPath.row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里将会调用一个log日志，然后使用block来计算出行高,我们在view controllr中进行另外的一些连接:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_delegate = [[SCNonEstimatingTableViewDelgate alloc] initWithHeightBlock:^&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; heightForRowAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.delegate = _delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行应用程序然后就可以展示可变的行高的表格:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day19-uitableview-row-height-estimation-0.png&quot;&gt;
&lt;p&gt;查看打印的log日志，我们会发现在我们第一次渲染表格的时候会对每一个单元格调用获得高度的方法。这是因为表格视图需要知道它自身的全部高度。我们的&lt;code&gt;heightForRowAtIndex:&lt;/code&gt;工具方法模拟了复杂的长时间计算过程。添加了逻辑上面的时间，我们就会在加载表格视图的时候有一些延迟，日志信息如下:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day19-uitableview-row-height-estimation-1.png&quot;&gt;
&lt;h3 id=&quot;With-estimation&quot;&gt;&lt;a href=&quot;#With-estimation&quot; class=&quot;headerlink&quot; title=&quot;With estimation&quot;&gt;&lt;/a&gt;With estimation&lt;/h3&gt;&lt;p&gt;新的估算高度的代理方法提供一种提高初始化延迟来进行渲染表格的方法。如果除了&lt;code&gt;tableView:heightForRowAtIndexPath:&lt;/code&gt;之外，我们实现&lt;code&gt;tableView:estimatedHeightForRowAtIndexPath:&lt;/code&gt;,然后在渲染表格视图之前不是调用 height 方法，而是每一行数据调用 estimateHeight 方法。height 方法仅仅用来为已经渲染到屏幕上面的行调用。因此,我们将高度计算划分为一个方法需要准确的高度(因为单元格即将出现在屏幕),和一个方法只是用来计算整个tableview的高度(因此不需要完全准确)。&lt;/p&gt;
&lt;p&gt;为了验证这一点，我们需要创建一个新的代理，它将会实现估算高度的方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCEstimatingTableViewDelgate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;SCNonEstimatingTableViewDeletate&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithHeightBlock(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt; index))heightBlock estimationBlock:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index))estimationBlock;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里，我们得到有两个block的构造器，一个将会用来得到准备的高度，另一个用来估算:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@implentation SCEstimatingTableViewDelegate &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^_estimationBlock)(&lt;span class=&quot;built_in&quot;&gt;NSUinteger&lt;/span&gt; index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)initWithHeightBlock(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index))heightBlock estimationBlock:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; (^)(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index))estimationBlock &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithHeightBlock:heightBlock];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_estimationBlock = [estimationBlock &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们来实现这个新的估算方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - UITableViewDelegate methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView estimatedHeightForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Estimating height (row %d)&quot;&lt;/span&gt;, indexPath.row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _estimationBlock(indexPath.row);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在view controller中更新一些简单的估算高度的方法，只需要返回我们单元格的平均高度(40.0);&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.enableEstimation) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_delegate = [[SCEstimatingTableViewDelegate alloc] initWithHeightBlock:^&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; heightForRowAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; estimationBlock:^&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;40.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		 _delegate = [[SCNonEstimatingTableViewDelegate alloc] initWithHeightBlock:^&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;NSUInteger&lt;/span&gt; index) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; heightForRowAtIndex:index];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView.delegate = _delegate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行应用程序，然后观察日志信息然后我们就可以看到height方法在初始化渲染之前没有被调用，但是调用的是estimated height方法。在单元格已经被渲染了之后才会调用真实的height方法。因此，我们的加载时间比以前减少了不少：&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/25/ios7-day-by-day-day19-uitableview-row-height-estimation-2.png&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;如前所述,这个例子有点做作,但它确实证明相当好,如果计算的实际身高是努力工作实现新的估计高度方法真的可以提高应用程序的响应能力,特别是如果你有一个大tableview。有额外的高度估计方法一节页眉和页脚,在完全相同的方式工作。它可能不是一个开创性的API改变,但在某些情况下,能真正提高用户体验,所以它绝对是值得做的事情。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/16/ios7-day-by-day-day-19-uitableview-row-height-estimation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 19 :: UITableView Row Height Estimation&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;今天我们将会来查看一个相当小的额外的&lt;code&gt;UIKit API&lt;/code&gt;，其中一个就是复杂的表格来影响用户体验。估算行高是在表格的代理方法中的一个额外的方法进行设置，它不仅仅可以返回默认的行高，还可以返回估算的高度来进行替换。我们将会查看为什么这属于一个高级的部分。为了能够能够验证这些，我们需要构建一个简单的应用，它里面有一个表格，可以让我们看到具有估算高度和没有估算高度的示例。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Without-estimation-没有估算&quot;&gt;&lt;a href=&quot;#Without-estimation-没有估算&quot; class=&quot;headerlink&quot; title=&quot;Without estimation - 没有估算&quot;&gt;&lt;/a&gt;Without estimation - 没有估算&lt;/h3&gt;&lt;p&gt;我们通过&lt;code&gt;UITableViewController&lt;/code&gt;来创建一个简单的&lt;code&gt;UITableView&lt;/code&gt;.它包含了一个section200行数据。没有单元包含了包含他们自己的索引和高度。如果所有的行都是具有相同高度，那么我们就不需要去实现代理中的&lt;code&gt;heightForRowAtIndexPath:&lt;/code&gt;方法,然后我们也不需要去使用新的估算方法来改善什么东西。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)numberOfSectionsInTableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Retur the number of sections.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableView numberOfRowsInSection:(&lt;span class=&quot;built_in&quot;&gt;NSInteger&lt;/span&gt;)section &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Return the number of rows in the section.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *)tableView:(&lt;span class=&quot;built_in&quot;&gt;UITableView&lt;/span&gt; *)tableview cellForRowAtIndexPath:(&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *)indexPath &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *cellIdentifier = &lt;span class=&quot;string&quot;&gt;@&quot;Cell&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UITableViewCell&lt;/span&gt; *cell = [tableView dequeueReusableCellWithIdentifier:cellIdentifier forIndexPath:indexPath];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Configure the cell...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cell.textLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Cell %03d&quot;&lt;/span&gt;, indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; height = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; heightForRowAtIndex:indexPath.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cell.detailTextLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;Height %0.2f&quot;&lt;/span&gt;, height];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; cell;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 18 :: Detecting Facial Features with CoreImage</title>
    <link href="http://kingiol.github.io/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage/"/>
    <id>http://kingiol.github.io/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage/</id>
    <published>2014-01-23T01:08:00.000Z</published>
    <updated>2014-01-25T02:47:40.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;运用&lt;code&gt;AVFoundation&lt;/code&gt;和&lt;code&gt;CoreImage&lt;/code&gt;,从iOS5开始就介绍了有关脸部识别的功能。在iOS7中，运用&lt;code&gt;CoreImage&lt;/code&gt;进行脸部识别已经改进了许多新的识别特性(包括微笑和眨眼).这个API是十分简单易用的，所以我们创建一个应用程序，它运用&lt;code&gt;AVFoundation&lt;/code&gt;进行查找脸部，然后在使用&lt;code&gt;CoreImage&lt;/code&gt;来对寻找照片中的微笑和闭眼。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Face-detection-with-AVFoundation-运用AVFoundation进行面部识别&quot;&gt;&lt;a href=&quot;#Face-detection-with-AVFoundation-运用AVFoundation进行面部识别&quot; class=&quot;headerlink&quot; title=&quot;Face detection with AVFoundation - 运用AVFoundation进行面部识别&quot;&gt;&lt;/a&gt;Face detection with AVFoundation - 运用AVFoundation进行面部识别&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;/blog/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation/&quot;&gt;Day 16&lt;/a&gt;中，我们使用&lt;code&gt;AVFoundation&lt;/code&gt;中的&lt;code&gt;AVCatpureMetadataOutput&lt;/code&gt;类来寻找和解析二维码。面部识别也是使用同样的方式，和二维码一样都是metadata对象。我们将会创建一个&lt;code&gt;AVCaptureMetadataOutput&lt;/code&gt;对象，但是它具有不懂的metadata类型:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVCaptureMetadataObject&lt;/span&gt; *output = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureMetadataOutput&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Have to add the output before settig metadata types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_session addOutput:output];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// We&#39;re only interested in faces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectTypes:@[&lt;span class=&quot;built_in&quot;&gt;AVMetadataObjectTypeFace&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This VC is the delegate, Please call use on the main queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectsDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; queue:dispatch_get_main_queue()];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们和之前一样来实现代理方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)captureOutput:(&lt;span class=&quot;built_in&quot;&gt;AVCpatureOutput&lt;/span&gt; *)captureOutput didOutputMetadataObjects:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)metadataObjects fromConnection:(&lt;span class=&quot;built_in&quot;&gt;AVCaptureConnection&lt;/span&gt; *)connection &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;AVMetadataObject&lt;/span&gt; *metadataObject &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; metadataObjects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([metadataObject.type isEqualToString:&lt;span class=&quot;built_in&quot;&gt;AVMetadataObjectTypeFace&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Take an image of the face and pass to CoreImage for detection&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;AVCaptureConnection&lt;/span&gt; *stillConnection = [_stillImageOutput connectionWithMediaType:&lt;span class=&quot;built_in&quot;&gt;AVMediaTypeVideo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[_stillImageOutput captureStillImageSaynchronouslyFromConnection:stillConnection completionHandler:^(CMSampleBufferRef imageDataSampleBuffer, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;There was a problem&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *jpegData = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureStillImageOutput&lt;/span&gt; jpegStillImage&lt;span class=&quot;built_in&quot;&gt;NSDataRepresentation&lt;/span&gt;:imageDataSampleBuffer];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *smileImage = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWithData:jpegData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				_previewLayer.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[_session stopRunning];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.imageView.image = smileyImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activityView.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Processing&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; imageWithData:jpegData];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; imageContainsSmiles:image callback:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; happyFace) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (happyFace) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Happy Face Found!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;						&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Not a good photo...&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activityView.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;					&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.retakeButton.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;和二维码一样都是十分相似的，只是现在我们在会话中添加了一个新的输出类型(&lt;code&gt;AVCaptureStillImageOutput&lt;/code&gt;)。这就允许我们把拍的照片作为输入源,这就是&lt;code&gt;captureStillImageAsynchronouslyFromConnection:completionHandler:&lt;/code&gt;所做的。我们当我们通知&lt;code&gt;AVFoundation&lt;/code&gt;来进行脸部识别的时候，我们需要在当前的输入中保持一个image,然后停止会话.&lt;/p&gt;
&lt;p&gt;我们创建一个JPEG代表捕获到的图像:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *jpegData = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureStillImageOutput&lt;/span&gt; jpegStillImage&lt;span class=&quot;built_in&quot;&gt;NSDataRepresentation&lt;/span&gt;:imageDataSampleBuffer];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们把它放置到一个&lt;code&gt;UIImageView&lt;/code&gt;中，然后创建一个&lt;code&gt;CIImage&lt;/code&gt;版本，为&lt;code&gt;CoreImage&lt;/code&gt;来进行面部特征识别做准备。我们将会来看看你&lt;code&gt;imageContainsSmiles:callback:&lt;/code&gt;的方法。&lt;/p&gt;
&lt;h3 id=&quot;Feature-finding-with-CoreImage-运用CoreImage来寻找面部特性&quot;&gt;&lt;a href=&quot;#Feature-finding-with-CoreImage-运用CoreImage来寻找面部特性&quot; class=&quot;headerlink&quot; title=&quot;Feature finding with CoreImage - 运用CoreImage来寻找面部特性&quot;&gt;&lt;/a&gt;Feature finding with CoreImage - 运用CoreImage来寻找面部特性&lt;/h3&gt;&lt;p&gt;&lt;code&gt;CoreImage&lt;/code&gt;需要一个&lt;code&gt;CIContext&lt;/code&gt;和一个&lt;code&gt;CIDetector&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_ciContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_ciContext = [&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!_faceDetector) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_faceDetector = [&lt;span class=&quot;built_in&quot;&gt;CIDetector&lt;/span&gt; detectorOfType:&lt;span class=&quot;built_in&quot;&gt;CIDetectorTypeFace&lt;/span&gt; context:_ciContext options:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们得到查询器来执行它的检索，我们需要调用&lt;code&gt;featuresInImage:options:&lt;/code&gt;方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *features = [_faceDetector featuresInImage:image options:@&amp;#123;&lt;span class=&quot;built_in&quot;&gt;CIDetectorEyeBlink&lt;/span&gt;: @YES, &lt;span class=&quot;built_in&quot;&gt;CIDetectorSmile&lt;/span&gt;: @YES, &lt;span class=&quot;built_in&quot;&gt;CIDetectorImageOrientation&lt;/span&gt;: @&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了能够让查询器来执行微笑和眨眼的检索，我们需要指定查询器的参数(CIDetectorEyeBlink和CIDetectorSmile)。&lt;code&gt;CoreImage&lt;/code&gt;面部查询器是需要指定方向的，因此，我们需要设置查询器的方向来匹配程序中的设计.&lt;/p&gt;
&lt;p&gt;现在我们需要循环特性数组(它包含&lt;code&gt;CIFaceFeature&lt;/code&gt;对象)，然后我们需要辨别寻找出哪个包含了微笑或者眨眼的动作:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; happyPicture = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([features count] &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	happyPicture = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;CIFeature&lt;/span&gt; *feature &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; features) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([feature isKindOfClass:[&lt;span class=&quot;built_in&quot;&gt;CIFaceFeature&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;CIFaceFeature&lt;/span&gt; *faceFeature = (&lt;span class=&quot;built_in&quot;&gt;CIFaceFeature&lt;/span&gt; *)feature;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!faceFeature.hasSmile) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			happyPicture = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (faceFeature.leftEyeClosed || faceFeature.rightEyeClosed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			happyPicture = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后我们在主线程上面执行一个回调函数:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;dispatch_async&lt;/span&gt;(dispatch_get_main_queue(), ^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	callback(happyPicture);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们的回调函数更新标签来描述是不是一个好的图片:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; imageContainsSmiles:image callback:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; happyFace) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (happyFace) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Happy Face Found!&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = &lt;span class=&quot;string&quot;&gt;@&quot;Not a good photo...&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.activityView.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.retakeButton.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你运行应用程序，将会发现&lt;code&gt;CoreImage&lt;/code&gt;是来进行面部特性的检测是多少的牛X：&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage-0.png&quot; width=&quot;180&quot;&gt;
&lt;img src=&quot;/images/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage-1.png&quot; width=&quot;180&quot;&gt;
&lt;img src=&quot;/images/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage-2.png&quot; width=&quot;180&quot;&gt;
&lt;img src=&quot;/images/2014/01/23/ios7-day-by-day-day18-detecting-facial-features-with-coreimage-3.png&quot; width=&quot;180&quot;&gt;
&lt;p&gt;除了这些属性之外,还可以找到不同的面部特征的位置,如眼睛和嘴巴。&lt;/p&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;虽然不是一个突破性的API,&lt;code&gt;CoreImage&lt;/code&gt;面部查询器添加一个漂亮的询问你的面部图像的能力。它可以使一个不错的添加到摄影应用,帮助用户把所有他们所需要的不一样的功能。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/15/ios7-day-by-day-day-18-detecting-facial-features-with-coreimage&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 18 :: Detecting Facial Features with CoreImage&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;运用&lt;code&gt;AVFoundation&lt;/code&gt;和&lt;code&gt;CoreImage&lt;/code&gt;,从iOS5开始就介绍了有关脸部识别的功能。在iOS7中，运用&lt;code&gt;CoreImage&lt;/code&gt;进行脸部识别已经改进了许多新的识别特性(包括微笑和眨眼).这个API是十分简单易用的，所以我们创建一个应用程序，它运用&lt;code&gt;AVFoundation&lt;/code&gt;进行查找脸部，然后在使用&lt;code&gt;CoreImage&lt;/code&gt;来对寻找照片中的微笑和闭眼。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Face-detection-with-AVFoundation-运用AVFoundation进行面部识别&quot;&gt;&lt;a href=&quot;#Face-detection-with-AVFoundation-运用AVFoundation进行面部识别&quot; class=&quot;headerlink&quot; title=&quot;Face detection with AVFoundation - 运用AVFoundation进行面部识别&quot;&gt;&lt;/a&gt;Face detection with AVFoundation - 运用AVFoundation进行面部识别&lt;/h3&gt;&lt;p&gt;在&lt;a href=&quot;/blog/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation/&quot;&gt;Day 16&lt;/a&gt;中，我们使用&lt;code&gt;AVFoundation&lt;/code&gt;中的&lt;code&gt;AVCatpureMetadataOutput&lt;/code&gt;类来寻找和解析二维码。面部识别也是使用同样的方式，和二维码一样都是metadata对象。我们将会创建一个&lt;code&gt;AVCaptureMetadataOutput&lt;/code&gt;对象，但是它具有不懂的metadata类型:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVCaptureMetadataObject&lt;/span&gt; *output = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureMetadataOutput&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Have to add the output before settig metadata types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[_session addOutput:output];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// We&#39;re only interested in faces&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectTypes:@[&lt;span class=&quot;built_in&quot;&gt;AVMetadataObjectTypeFace&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This VC is the delegate, Please call use on the main queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectsDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; queue:dispatch_get_main_queue()];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 17 :: iBeacons</title>
    <link href="http://kingiol.github.io/2014/01/22/ios7-day-by-day-day17-ibeacons/"/>
    <id>http://kingiol.github.io/2014/01/22/ios7-day-by-day-day17-ibeacons/</id>
    <published>2014-01-22T03:42:00.000Z</published>
    <updated>2014-01-22T09:04:51.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在iOS7发布主题中并没有很详细的提及到&lt;code&gt;iBeacons&lt;/code&gt;概念。在Bluetooth LE中有些新的特性可以允许近距离的通知和测距。简单的使用通知的是当你接近一个商店的时候然后收到一组特价商品的列表，或者接近你付款账单的时候可以收到发票信息。另外还有很多其他的地方可以使用，我相信在未来的时间里面将会出现一些更加深入创造性的功能。&lt;/p&gt;
&lt;p&gt;今天，我们将会查看如何让一个iOS设备扮演成一个iBeacon,并且怎样使用一个不同的设备来估算出到iBeacon设备的距离。我们将会创建一个基于”Hot/Cold”捉迷藏的游戏，iBeacon设备可以隐藏，然后寻找器显示更新估算它们之间的距离。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;Create-a-beacon&quot;&gt;&lt;a href=&quot;#Create-a-beacon&quot; class=&quot;headerlink&quot; title=&quot;Create a beacon&quot;&gt;&lt;/a&gt;Create a beacon&lt;/h3&gt;&lt;p&gt;为了能够创建一个应用程序扮演成iBeacon设备，我们需要使用&lt;code&gt;CoreLocation&lt;/code&gt;来创建beacon属性，然后需要使用&lt;code&gt;CoreBluetooth&lt;/code&gt;在适当的时候来广播。&lt;/p&gt;
&lt;p&gt;iBeacons具有一些属性，他们都是唯一的标识。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;proximityUUID.有一个&lt;code&gt;NSUUID&lt;/code&gt;对象它可以标识你的电脑的beacons.你可以拥有相同uuid的beacons.并且设置&lt;code&gt;CoreLocation&lt;/code&gt;来通知你是否当前有设备进入到监测范围内。&lt;/li&gt;
&lt;li&gt;major.是一个&lt;code&gt;NSNumber&lt;/code&gt;代表这个beacon物理设备的主要ID，它可以唯一标识一个特性的设备。这个数字代表了一个16位的无符号整数。&lt;/li&gt;
&lt;li&gt;minor.另外一个&lt;code&gt;NSNumber&lt;/code&gt;,它可以代表私人的beacon。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以通过设置&lt;code&gt;CoreLocation&lt;/code&gt;来通知iBeacon中3个可能的ID。也就是说不管什么时候任何在检测范围内的iBeacon具有相同的UUID或者相同的UUID和marjor ID，或者需要一个指定的beacon(UUID、marjor和minor的ID全部匹配)。&lt;/p&gt;
&lt;p&gt;我们需要包含&lt;code&gt;CoreLocation&lt;/code&gt;和&lt;code&gt;CoreBluetooth&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import CoreLocation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;@import CoreBluetooth;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了能够让应用程序作为beacon出现，我们需要创建一个&lt;code&gt;CLBeaconRegion&lt;/code&gt;对象，指定我们需要的ID。在我们的情况下面，我们之需要设置UUID:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_rangedRegion = [[CLBeaconRegion alloc] initWithProximityU&lt;span class=&quot;built_in&quot;&gt;UID&lt;/span&gt;:_beaconU&lt;span class=&quot;built_in&quot;&gt;UID&lt;/span&gt; identifier:&lt;span class=&quot;string&quot;&gt;@&quot;com.shinobicontrols.HotOrCold&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述提到的UUID我们是这样创建的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_beaconU&lt;span class=&quot;built_in&quot;&gt;UID&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;NSUUID&lt;/span&gt; alloc] initWithU&lt;span class=&quot;built_in&quot;&gt;UIDString&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;@&quot;3B2DCB64-A300-4F62-8A11-F6E7A06E4BC0&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以通过使用使用OS X的&lt;code&gt;uuidgen&lt;/code&gt;工具生成一个&lt;code&gt;UUIDString&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;➜  &lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;-ibeacons git:(days/&lt;span class=&quot;number&quot;&gt;17&lt;/span&gt;-ibeacons) ✗ uuidgen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;874&lt;/span&gt;D949F&lt;span class=&quot;number&quot;&gt;-3325&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-4&lt;/span&gt;B3F-A6F4-AB5BBCE440F6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们还需要创建一个&lt;code&gt;CoreBluetooth&lt;/code&gt;的外部管理者:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_cbPeripheralManager = [[CBPeripheralManger alloc] initWithDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; queue:dispatch_get_main_queue()];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个&lt;code&gt;CBPeripheralManager&lt;/code&gt;需要设置一个代理，然后这个代理需要使用一个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - CBPeripheralManager delegate methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)peripheralManagerDidUpdateState:(CBPeripheralManager *)peripheral &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// We don&#39;t really care...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们作为一个iBeacon开始发送通知，然后我们从&lt;code&gt;CLBeaconRegion&lt;/code&gt;得到一个字典的设置,然后把他们专递到&lt;code&gt;CBPeripheralManager&lt;/code&gt;中开始发送通知:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;)handleHidingButtonPressed:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_cbPeripheralManager.state &amp;lt; CBPeripheralManagerStatePoweredOn) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;Bluetooth must be enabled in order to act as an iBeacon&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Now we construct a CLBeaconRegion to represent ourself&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *toBoadcast = [_rangedRegion peripheralDataWithMeasuredPower:@&lt;span class=&quot;number&quot;&gt;-60&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[_cbPeripheralManager startAdvertising:toBroadcast];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，在构造通知设置之前，我们需要检查peripheral manager是不是已经启动了，然后开始做广告的细节。&lt;code&gt;measuredPower&lt;/code&gt;属性指定了位置为1m内观察监测距离。&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/22/ios7-day-by-day-day17-ibeacons-0.jpg&quot;&gt;
&lt;p&gt;我们可以在&lt;code&gt;CBPeripheralManger&lt;/code&gt;对象中调用&lt;code&gt;stopAdvertising&lt;/code&gt;方法来停止iBeacon。&lt;/p&gt;
&lt;h3 id=&quot;Beacon-Ranging-Beancon测距&quot;&gt;&lt;a href=&quot;#Beacon-Ranging-Beancon测距&quot; class=&quot;headerlink&quot; title=&quot;Beacon Ranging - Beancon测距&quot;&gt;&lt;/a&gt;Beacon Ranging - Beancon测距&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;CoreLocation&lt;/code&gt;,当一个具有详细ID的iBeacon出现在我们的监测范围内的时候，我们就可以收到通知。在我们的”Hot/Cold”游戏中，我们将在请求范围内更新我们上面创建的beacon。&lt;/p&gt;
&lt;p&gt;我们需要创建一个&lt;code&gt;CoreLocation CLLocationManager&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_clLocationManager = [CLLocationManager new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_clLocationManager.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们已经设置好了代理，接下来就是实现代理中的方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)locationManager:(CLLocationManager *)manager didRangeBeacons:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)beacons inRegion:(CLBeaconRegion *)region &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([region isEqual:_rangedRegion]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Let&#39;s just take the first beacon&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		CLBeacon *beacon = [beacons firstObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.textColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalStrengthLabel.textColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; whiteColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.signalStrengthLabel.text = [&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; stringWithFormat:&lt;span class=&quot;string&quot;&gt;@&quot;%ddB&quot;&lt;/span&gt;, beacon.rssi];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (beacon.proximity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CLProximityUnknown: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blueColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setStatus:&lt;span class=&quot;string&quot;&gt;@&quot;Freezing!&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CLProximityFar: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blueColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setStatus:&lt;span class=&quot;string&quot;&gt;@&quot;Cold!&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CLProximityImmediate: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; purpleColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setStatus:&lt;span class=&quot;string&quot;&gt;@&quot;Warmer&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; CLProximityNear: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; setStatus:&lt;span class=&quot;string&quot;&gt;@&quot;Hot!&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个代理方法响应设备与beacons的距离更新。这个代理方法被调用的频率是1Hz,并且给方法提供了一个装有beacons的数组，一个&lt;code&gt;CLBeacon&lt;/code&gt;有属性确定它的唯一标识。我们将会通过这个来设置视图的背景色，更新标签的状态可以通过下面的工具方法进行设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setStatus:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)status &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.statusLabel.text = status;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了是代理的方法能够被调用，我们需要让location manager开启寻找beacon:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[_clLocationManager startRangeingBeaconsInRegion:_rangeRegion];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还有一个方法可以用来停止对beacons的监测:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[_clLocationManager stopRangingBeaconsInRegion:_rangeRegion];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你在两个设置上面运行这个应用程序(其中一个设置具有Bluetooth LE),设置一个隐藏和一个进行查找:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/22/ios7-day-by-day-day17-ibeacons-1.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/22/ios7-day-by-day-day17-ibeacons-2.png&quot; width=&quot;250&quot;&gt;
&lt;img src=&quot;/images/2014/01/22/ios7-day-by-day-day17-ibeacons-3.png&quot; width=&quot;250&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;iBeacons提供出色的潜力——他们甚至可以iOS7的最具破坏性的新特性之一。我认为他们都是苹果的答案,最后一击,NFC的移动设备。希望手机不仅会很快我们得到正确的信息当我们到达一个服务台,但我们也开始看到室内导航。我鼓励你去看看iBeacon API——它不是很复杂,我期待您的创新使用!&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/14/ios7-day-by-day-day-17-ibeacons/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 17 :: iBeacons&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在iOS7发布主题中并没有很详细的提及到&lt;code&gt;iBeacons&lt;/code&gt;概念。在Bluetooth LE中有些新的特性可以允许近距离的通知和测距。简单的使用通知的是当你接近一个商店的时候然后收到一组特价商品的列表，或者接近你付款账单的时候可以收到发票信息。另外还有很多其他的地方可以使用，我相信在未来的时间里面将会出现一些更加深入创造性的功能。&lt;/p&gt;
&lt;p&gt;今天，我们将会查看如何让一个iOS设备扮演成一个iBeacon,并且怎样使用一个不同的设备来估算出到iBeacon设备的距离。我们将会创建一个基于”Hot/Cold”捉迷藏的游戏，iBeacon设备可以隐藏，然后寻找器显示更新估算它们之间的距离。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 16 :: Decoding QR Codes with AVFoundation</title>
    <link href="http://kingiol.github.io/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation/"/>
    <id>http://kingiol.github.io/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation/</id>
    <published>2014-01-20T15:56:00.000Z</published>
    <updated>2014-01-22T03:40:09.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在昨天，我们已经查看了&lt;code&gt;CoreImage&lt;/code&gt;中包含的新的过滤器中的一些，并且发现在iOS7中，我们可以有能力自己生成一个二维码。所以，既然给出了如何生成二维码，就需要能够对这个二维码进行解码，当然不能让你失望了，我们在今天的文章中就来介绍如何使用&lt;code&gt;AVFoundation&lt;/code&gt;框架中的一些新特性进行解码二维码。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;AVFoundation-pipeline-AVFoundation工作流&quot;&gt;&lt;a href=&quot;#AVFoundation-pipeline-AVFoundation工作流&quot; class=&quot;headerlink&quot; title=&quot;AVFoundation pipeline - AVFoundation工作流&quot;&gt;&lt;/a&gt;AVFoundation pipeline - AVFoundation工作流&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AVFoundation&lt;/code&gt;是一个大的框架，它可以促进创建，编辑，显示和捕获多媒体。这篇文章并不是主要介绍如何使用&lt;code&gt;AVFoundation&lt;/code&gt;,而是我们要通过这个框架来提取手机屏幕上面的二维码，为了能够使用这个框架，我们首先需要导入这个框架:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import &lt;span class=&quot;built_in&quot;&gt;AVFoundation&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;当我们捕获媒体的时候，我使用&lt;code&gt;AVCaptureSession&lt;/code&gt;类来充当我们工作流的核心。然后我们需要添加输入和输出来完成这次会话。我们将会在&lt;code&gt;viewDidLoad&lt;/code&gt;方法中设置这些。首先，创建一个会话:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVCaptureSession&lt;/span&gt; *session = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureSession&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要添加主要的摄像头作为会话的输入。输入就是一个&lt;code&gt;AVCaptureDeviceInput&lt;/code&gt;对象，它是通过一个&lt;code&gt;AVCaptureDevice&lt;/code&gt;对象创建的：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVCaptureDevice&lt;/span&gt; *device = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureDevice&lt;/span&gt; defaultDeviceWithMediaType:&lt;span class=&quot;built_in&quot;&gt;AVMediaTypeVideo&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error = &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; *input = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureDeviceInput&lt;/span&gt; deviceInputWithDevice:device error:&amp;amp;error];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (input) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Add the input to the session&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[session addInput:input];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;error: %@&quot;&lt;/span&gt;, error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们获得了一个默认视频输入的设备引用，它将代表设备上面的后置摄像头。然后使用这个设备创建一个&lt;code&gt;AVCaptureDeviceInput&lt;/code&gt;输入对象，然后把它添加到会话中。&lt;/p&gt;
&lt;p&gt;为了获得获得视频中的内容，我们需要创建一个&lt;code&gt;AVCaptureVideoPreviewLayer&lt;/code&gt;.它是一个&lt;code&gt;CALayer&lt;/code&gt;的子类，当它添加到会话中的时候，它可以显示当前视图中的输出内容。考虑到这些，我们需要一个实例变量&lt;code&gt;_previewLayer&lt;/code&gt;来作为&lt;code&gt;AVCaptureVideoPreviewLayer&lt;/code&gt;的引用:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_previewLayer = [&lt;span class=&quot;built_in&quot;&gt;AVCaptureVideoPreviewLayer&lt;/span&gt; layerWithSession:session];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_previewLayer.videoGravit = &lt;span class=&quot;built_in&quot;&gt;AVLayerVideoGravityResizeAspectFill&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_previewLayer.bounds = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_previewLayer.position = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;CGRectGetMidX&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds), &lt;span class=&quot;built_in&quot;&gt;CGRectGetMidY&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.layer addSublayer:_previewLayer];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;videoGravity&lt;/code&gt;属性是用来指定视频是如何出现在层上面。由于视频的尺寸和屏幕不是相等的，我们可以把视频的边缘给砍掉，然后让它填充整个屏幕，所以使用&lt;code&gt;AVLayerVideoGravityResizeAspectFill&lt;/code&gt;值。我们添加这个层作为视图层的子层。&lt;/p&gt;
&lt;p&gt;现在才是真正开启会话的时候:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Start the AVSession running&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[session startRunning];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你运行应用程序，你将会摄像头的输出信息呈现在屏幕上面-神奇的感觉。&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation-0.png&quot;&gt;
&lt;h3 id=&quot;Capturing-metadata-捕获元数据&quot;&gt;&lt;a href=&quot;#Capturing-metadata-捕获元数据&quot; class=&quot;headerlink&quot; title=&quot;Capturing metadata - 捕获元数据&quot;&gt;&lt;/a&gt;Capturing metadata - 捕获元数据&lt;/h3&gt;&lt;p&gt;从iOS5开始就可以使用我们上述的内容，但是在这个章节，我们将会做很多事情，而这些东西只有在iOS7中才会存在的。&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;AVCaptureSession&lt;/code&gt;对象有附加的&lt;code&gt;AVCaptureOutput&lt;/code&gt;对象。形成一个工作流的终点。在这里我们感兴趣的是&lt;code&gt;AVCaptureOutput&lt;/code&gt;的子类&lt;code&gt;AVCaptureMetadataOutpu&lt;/code&gt;.它可以查出视频中的任何元数据然后输出它。这个类型的输出并不会形成图像或者视频，而是从图像或者视频中提取的元数据本身。设置这些如下所示:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;*&lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt; = [[&lt;span class=&quot;built_in&quot;&gt;AVCaptureMetadataOutput&lt;/span&gt; alloc] init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Have to add the output before setting metadata types&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[session addOutput:output];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// What different things can we register to recognise?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;%@&quot;&lt;/span&gt;, [output availableMetadataObjectTypes]);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里，我们创建一个元数据输出对象，并且把它作为一个输出添加到会话中。然后我们可以提供一个方法用来记录不同的元数据类型的列表:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;2013&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-10&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-09&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;26.085&lt;/span&gt; CodeScanner[&lt;span class=&quot;number&quot;&gt;6277&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;60&lt;/span&gt;b] (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.gs1.UPC-E&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.Code39&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.Code39Mod43&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.gs1.EAN-13&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.gs1.EAN-8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;com.intermec.Code93&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.Code128&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.PDF417&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.QRCode&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;org.iso.Aztec&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;需要重要注意的就是我们在尝试这个的时候已经把我们的元数据输出设置到会话中。由于可用的类型依赖与输入设备。我们可以使用下面的代码注册查找的二维码类型:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// We&#39;re only interested in QR Codes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectTypes:@[&lt;span class=&quot;built_in&quot;&gt;AVMetadataObjectTypeQRCode&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这是一个数组类型，所以你可以只能多个你想要的元数据类型。&lt;/p&gt;
&lt;p&gt;当元数据对象从视频流中找到一些东西，它就可以生成元数据，然后通知它的代理，所以，我们需要设置代理:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// This VC is the delegate, Please call us on the main queue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[output setMetadataObjectsDelegate:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; queue:dispatch_get_main_queue()];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于&lt;code&gt;AVFoundation&lt;/code&gt;被设计成可以允许线程访问，所以我们需要指定代理在那个线程中使用。&lt;/p&gt;
&lt;p&gt;我们需要适配&lt;code&gt;AVCaptureMetadataOutputObjectsDelegate&lt;/code&gt;协议:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCViewController&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;AVCaptureMetadataOutputObjectsDelegate&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;AVCaptureVideoPreviewLayer&lt;/span&gt; *_previewLayer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; *_decodeMessage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们需要实现协议的方法是&lt;code&gt;captureOutput:didOutputMetadataObjects:fromConnection:&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#prgma mark - AVCaptureMetadataOutputObjectsDelegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)captureOutput:(&lt;span class=&quot;built_in&quot;&gt;AVCaptureOutput&lt;/span&gt; *)captureOutput didOutputMetadataObjects:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)metadataObjects fromConnection:(&lt;span class=&quot;built_in&quot;&gt;AVCaptureConnection&lt;/span&gt; *)connection &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;AVMetadataObject&lt;/span&gt; *metadata &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; metadataObjects) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([metadata.type isEqualToString:&lt;span class=&quot;built_in&quot;&gt;AVMetadataObjectTypeQRCode&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;built_in&quot;&gt;AVMetadataMachineReadableCodeObject&lt;/span&gt; *transformed = (&lt;span class=&quot;built_in&quot;&gt;AVMetadataMachineReadableCodeObject&lt;/span&gt; *)metadata;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;comment&quot;&gt;// Update the view with the decoded text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			_decodedMessage.text = [transformed stringValue];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的&lt;code&gt;metadataObjects&lt;/code&gt;数组包含了&lt;code&gt;AVMetadataObject&lt;/code&gt;对象(就是我们设置检索的类型的数据).由于我们只注册查找二维码类型，我们我们得到的数组里面的内容的类型都是&lt;code&gt;AVMetadataObjectTypeQRCode&lt;/code&gt;.&lt;code&gt;AVMetadataMachineReadableCodeObject&lt;/code&gt;类型具有一个&lt;code&gt;stringValue&lt;/code&gt;属性，它包含了所有元数据队形解码的值信息。在这里，我们把获得到的字符串信息显示到&lt;code&gt;_decodedMessage&lt;/code&gt;标签上面，标签我们可以在&lt;code&gt;viewDidLoad&lt;/code&gt;方法中进行设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Add a label to display the resultant message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_decodedMessage = [[&lt;span class=&quot;built_in&quot;&gt;UILabel&lt;/span&gt; alloc] initWithFrame:&lt;span class=&quot;built_in&quot;&gt;CGRectMake&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds) - &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;CGRectGetWidth&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds), &lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_decodedMessage.numberOfLines = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_decodedMessage.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; colorWithWhite:&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt; alpha:&lt;span class=&quot;number&quot;&gt;0.9&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_decodedMessage.textColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; darkGrayColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_decodedMessage.textAlignment = &lt;span class=&quot;built_in&quot;&gt;NSTextAlignmentCenter&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:_decodedMessage];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;运行应用程序，然后用摄像头对准二维码，我们就可以在标签上面解码出二维码上面的内容，然后显示出来，具体的效果如下图所示:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation-1.png&quot;&gt;
&lt;h3 id=&quot;Drawing-the-code-outline-给二维码添加上线框&quot;&gt;&lt;a href=&quot;#Drawing-the-code-outline-给二维码添加上线框&quot; class=&quot;headerlink&quot; title=&quot;Drawing the code outline - 给二维码添加上线框&quot;&gt;&lt;/a&gt;Drawing the code outline - 给二维码添加上线框&lt;/h3&gt;&lt;p&gt;除了提供解码元数据对象，它还包含了位置的边界，我们的应用程序将会直观的标识出具体的元数据对象的具体的位置。&lt;/p&gt;
&lt;p&gt;为了达到这个目的，首先我们需要创建一个&lt;code&gt;UIView&lt;/code&gt;的子类，它可以提供一系列的点，然后将会连接起来。这将会使我们明确的来构建它:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCShapeView&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *corners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的&lt;code&gt;corners&lt;/code&gt;属性数组包含了&lt;code&gt;CGPoint&lt;/code&gt;对象，每一个都代表我们希望绘制图像路径的拐角处。&lt;/p&gt;
&lt;p&gt;我们将会使用一个&lt;code&gt;CAShapeLayer&lt;/code&gt;来进行绘制这些点，并且这是非常有效率的方法来绘制图形:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCShapeView&lt;/span&gt;() &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CAShapeLayer&lt;/span&gt; *_outline;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCShapeView&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)initWithFrame:(&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt;)frame &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; initWithFrame:frame];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Initialization code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_outline = [&lt;span class=&quot;built_in&quot;&gt;CAShapeLayer&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_outline.strokeColor = [[[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; blueColor] colorWithAlphaComponent:&lt;span class=&quot;number&quot;&gt;0.8&lt;/span&gt;] &lt;span class=&quot;built_in&quot;&gt;CGColor&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_outline.lineWidth = &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_outline.fillColor = [[&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor] &lt;span class=&quot;built_in&quot;&gt;CGColor&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.layer addSublayer:_outline];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们创建一个图像层，设置一些外观的属性，然后把它添加到当前的层中。我们现在就需要设置图形的路径，也就是我们现在需要设置&lt;code&gt;corners&lt;/code&gt;属性了:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)setCorners:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)corners &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (corners != _corners) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_corners = corners;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		_outline.path = [[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; createPathFromPoints:corners] &lt;span class=&quot;built_in&quot;&gt;CGPath&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上述含义是如果&lt;code&gt;corners&lt;/code&gt;属性发生了变化，图形就将会使用新的位置进行绘制.我们使用一个工具方法来通过封装了&lt;code&gt;CGPoint&lt;/code&gt;对象的数组对象来创建一个&lt;code&gt;UIBezierPath&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIBeazierPath&lt;/span&gt; *)cratePathFromPoints:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)points &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; *path = [&lt;span class=&quot;built_in&quot;&gt;UIBezierPath&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Start at the first corner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[path moveToPoint:[[points firstObject] &lt;span class=&quot;built_in&quot;&gt;CGPointValue&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Now draw lines around the corners&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSUinter&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, i &amp;lt; points.count; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[path addLineToPoint:[points[i] &lt;span class=&quot;built_in&quot;&gt;CGPointValue&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// And join it back to the first corner&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[path addLineToPoint:[[points firstObject] &lt;span class=&quot;built_in&quot;&gt;CGPointValue&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这实际上是创建了一个完成的图形，运用了&lt;code&gt;UIBezierPath&lt;/code&gt;的API。&lt;/p&gt;
&lt;p&gt;现在我们创建这个图形视图，我们需要在试图控制器中使用它，然后把它现在在我们查找的二维码上面。让我们创建一个实例变量，然后在&lt;code&gt;viewDidLoad&lt;/code&gt;方法中进行初始化:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox = [[SCShapeView alloc] initWithFrame:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.bounds];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox.backgroundColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; clearColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view addSubview:_boundingBox];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;现在我们需要更新这个视图中元数据输出的代理方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Transform the meta-data coordinates to screen coords&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;AVMetadataMachineReadableCodeObject&lt;/span&gt; *transformed = (&lt;span class=&quot;built_in&quot;&gt;AVMetadataMachineReadableCodeObject&lt;/span&gt; *)[_previewLayer transformedMetadataObjectForMetadataObject:metadata];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Update the frame on the _boundingBox view, and show it&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox.frame = transformed.bounds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox.hidden = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Now convert the corners array into CGPoints in the coordinate system&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// of the bounding box itself&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *translatedCorners = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; translatePoints:transformed.corners fromView:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view toView:_boundingBox];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set the corners array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;_boundingBox.corners = translatedCorners;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;AVFoundation&lt;/code&gt;在屏幕上面进行绘制的时候，使用一个不同于UIKit的坐标系，所以第一部分我们需要使用&lt;code&gt;AVCaptureVideoPreviewLayer&lt;/code&gt;中的一个代码片段&lt;code&gt;transformedMetadataObjectForMetadataObject:&lt;/code&gt;方法来把自身的坐标系进行转换。使它编程我们自己预览层的坐标系统.&lt;/p&gt;
&lt;p&gt;然后我们设置我们图形层的frame，它是通过查找的二维码的bounds得到的，然后对图形层进行显示.&lt;/p&gt;
&lt;p&gt;现在我们就需要设置&lt;code&gt;corners&lt;/code&gt;属性了，让图形层能够正确的显示，但是在此之前，我们需要再次改变系统坐标系。我们可以运用下面的工具类来达到这个目的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *)translatePoints:(&lt;span class=&quot;built_in&quot;&gt;NSArray&lt;/span&gt; *) fromView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)fromView toView:(&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *)toView &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; *translatedPoints = [&lt;span class=&quot;built_in&quot;&gt;NSMutableArray&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// The points are provided in a dictionary with keys X and Y&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;NSDictionary&lt;/span&gt; *point &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; points) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Let&#39;s turn them into CGPoints&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; pointValue = &lt;span class=&quot;built_in&quot;&gt;CGPointMake&lt;/span&gt;([point[&lt;span class=&quot;string&quot;&gt;@&quot;X&quot;&lt;/span&gt;] floatValue], [point[&lt;span class=&quot;string&quot;&gt;@&quot;Y&quot;&lt;/span&gt;] floatValue]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Now translate from one view to the other&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; translatedPoint = [fromView convertPoint:pointValue toView:toView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Box them up and add to the array&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[translatedPoint addObject:[&lt;span class=&quot;built_in&quot;&gt;NSValue&lt;/span&gt; valueWith&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt;:translatedPoint]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; [translatedPoints &lt;span class=&quot;keyword&quot;&gt;copy&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过上面的方法我们转换成为正确的&lt;code&gt;CGPoint&lt;/code&gt;数组设置到&lt;code&gt;corners&lt;/code&gt;属性中。&lt;/p&gt;
&lt;p&gt;如果你运行应用程序，你就会看到一个高亮的线框显示在我们的二维码上面:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation-2.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/20/ios7-day-by-day-day16-decoding-qr-codes-with-avfoundation-3.png&quot;&gt;
&lt;p&gt;最后一个小点是把绘制出来的线框过一段时间消失掉。这就阻止了当前没有发现二维码信息的时候，线框还存在的问题。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)startOverlayHideTimer&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Cancel it if we&#39;re already running&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(_boxHideTimer) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        [_boxHideTimer invalidate];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Restart it to hide the overlay when it fires&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _boxHideTimer = [&lt;span class=&quot;built_in&quot;&gt;NSTimer&lt;/span&gt; scheduledTimerWithTimeInterval:&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                     target:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   selector:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(removeBoundingBox:)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                   userInfo:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                                    repeats:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)removeBoundingBox:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// Hide the box and remove the decoded text&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _boundingBox.hidden = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    _decodedMessage.text = &lt;span class=&quot;string&quot;&gt;@&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以在代理方法方法中进行调用计时器:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Sart the timer which will hiden the overlay&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; startOverlayHideTimer];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AVFoundation&lt;/code&gt;框架是强大且复杂的，但是在iOS7中，它变得更好了。以前在移动设备上面查找条形码是一个十分艰巨的任务，但是通过我们今天介绍的这些新的元数据输出类型，现在就变得十分的简单而高效。不管你是否需要使用到条形码，这都是一个你需要用到的简单方法。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/11/ios7-day-by-day-day-16-decoding-qr-codes-with-avfoundation/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 16 :: Decoding QR Codes with AVFoundation&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在昨天，我们已经查看了&lt;code&gt;CoreImage&lt;/code&gt;中包含的新的过滤器中的一些，并且发现在iOS7中，我们可以有能力自己生成一个二维码。所以，既然给出了如何生成二维码，就需要能够对这个二维码进行解码，当然不能让你失望了，我们在今天的文章中就来介绍如何使用&lt;code&gt;AVFoundation&lt;/code&gt;框架中的一些新特性进行解码二维码。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;AVFoundation-pipeline-AVFoundation工作流&quot;&gt;&lt;a href=&quot;#AVFoundation-pipeline-AVFoundation工作流&quot; class=&quot;headerlink&quot; title=&quot;AVFoundation pipeline - AVFoundation工作流&quot;&gt;&lt;/a&gt;AVFoundation pipeline - AVFoundation工作流&lt;/h3&gt;&lt;p&gt;&lt;code&gt;AVFoundation&lt;/code&gt;是一个大的框架，它可以促进创建，编辑，显示和捕获多媒体。这篇文章并不是主要介绍如何使用&lt;code&gt;AVFoundation&lt;/code&gt;,而是我们要通过这个框架来提取手机屏幕上面的二维码，为了能够使用这个框架，我们首先需要导入这个框架:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;@import &lt;span class=&quot;built_in&quot;&gt;AVFoundation&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 15 :: CoreImage Filters</title>
    <link href="http://kingiol.github.io/2014/01/19/ios7-day-by-day-day15-coreimage-filters/"/>
    <id>http://kingiol.github.io/2014/01/19/ios7-day-by-day-day15-coreimage-filters/</id>
    <published>2014-01-19T12:47:00.000Z</published>
    <updated>2014-01-20T15:51:09.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在iOS5中就引入了&lt;code&gt;CoreImage&lt;/code&gt;这个框架，它是用来进行图像处理的。它抽象所有低级的与图像处理有关联的方法，从用户角度提供易于使用的过滤事件链架构。i0S7中介绍了新的过滤器，其中的一些，我们将会在进行的文章中介绍，我们将会来看看一些传统的图像过滤效果，然后在查看创建具有过滤效果的生成二维码的效果。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Photo-Effect-Filters-图像过滤效果&quot;&gt;&lt;a href=&quot;#Photo-Effect-Filters-图像过滤效果&quot; class=&quot;headerlink&quot; title=&quot;Photo Effect Filters - 图像过滤效果&quot;&gt;&lt;/a&gt;Photo Effect Filters - 图像过滤效果&lt;/h3&gt;&lt;p&gt;在移动应用程序世界里，能够应用比较酷的图片效果是一种趋势。例如instagram就十分的流行。&lt;code&gt;CoreImage&lt;/code&gt;添加了很多十分简单的是可以使用的过滤效果来帮助我们在应用程序中添加很多功能。&lt;/p&gt;
&lt;p&gt;为了能够使用这些过滤器，我们需要首先为&lt;code&gt;CoreImage&lt;/code&gt;做点功课。&lt;code&gt;CoreImage&lt;/code&gt;指定它自己的图像类型-&lt;code&gt;CIImage&lt;/code&gt;,它可以从很多不同的源被创建，包括与&lt;code&gt;CoreGraphics&lt;/code&gt;等价的&lt;code&gt;CGImage&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *_input&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;shinobi-badge-head.jpg&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *_inputImage = [&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:[_input&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;使用过滤器十分的简单，而且你还可以把他们串联起来，但是我们的目的是指定一个简单的过滤器:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIFilter&lt;/span&gt; *filter = [&lt;span class=&quot;built_in&quot;&gt;CIFilter&lt;/span&gt; filterWithName:&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectChrome&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[filter setValue:_inputImage forKey:k&lt;span class=&quot;built_in&quot;&gt;CIInputImageKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一个&lt;code&gt;CoreImage&lt;/code&gt;过滤器就是代表了一个&lt;code&gt;CIFilter&lt;/code&gt;类，它可以通过一个工厂方法来创建一个指定的过滤器对象。这些过滤器对象都是通过使用KVC的方式来指定相关的过滤参数的。所有的新图像的过滤器都是通过这些简单的属性-输入的图像，它指定使用一个字符串&lt;code&gt;kCIInputImageKey&lt;/code&gt;表示的key值。&lt;/p&gt;
&lt;p&gt;然后我们可以把获得的过滤器输出的图像转换成&lt;code&gt;UIImage&lt;/code&gt;,然后展示在&lt;code&gt;UIImageView&lt;/code&gt;上面:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *outputImage = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt;:filter.outputImage];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;新的图像的效果过滤器引用的key值有下面的一些:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectChrome&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectFade&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectInstant&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectMono&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectNoir&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectProcess&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectTonal&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;@&quot;CIPhotoEffectTransfer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在今天我们需要完成的是一个示例是我们有一个collection视图,他们用来示范同一个输入的图像在新的过滤器上面的不同输出图像。&lt;/p&gt;
&lt;p&gt;我们还需要构造&lt;code&gt;CGImage&lt;/code&gt;版本对应每个&lt;code&gt;CIImage&lt;/code&gt;过滤输出。这是因为属性&lt;code&gt;outputImage&lt;/code&gt;是懒加载的。为了达到目的，我们使用一个&lt;code&gt;CIContext&lt;/code&gt;来绘制&lt;code&gt;CIImage&lt;/code&gt;到&lt;code&gt;CoreGraphics&lt;/code&gt;的上下文中:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [[&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:filter.outputImage fromRect:filter.outputImage.extent];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *image = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:cgImage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGImageRelease&lt;/span&gt;(cgImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[images addObject:image];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来的程序都是写在&lt;code&gt;SCPhotoFiltersViewController&lt;/code&gt;中的使用了自定义的cell。如果你运行程序，你可以看到下面不同的过滤效果:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/19/ios7-day-by-day-day15-coreimage-filters-0.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/19/ios7-day-by-day-day15-coreimage-filters-1.png&quot;&gt;
&lt;h3 id=&quot;QR-Code-Generation-生成二维码&quot;&gt;&lt;a href=&quot;#QR-Code-Generation-生成二维码&quot; class=&quot;headerlink&quot; title=&quot;QR Code Generation - 生成二维码&quot;&gt;&lt;/a&gt;QR Code Generation - 生成二维码&lt;/h3&gt;&lt;p&gt;在iOS7中添加的图像效果过滤器中也引入了一个过滤器，它可以有能力来生成一个二维码来代表特性的数据对象。在应用程序的第二个页签(SCQRGeneratorViewController)示例中，当’Generate’按钮点击之后，文本框中的内容就会被编码到二维码中，展示出来。&lt;/p&gt;
&lt;p&gt;生成二维码的代码也是十分的简单:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *)createQRForString:(&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *)qrString &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Need to convert the string to a UTF-8 encoded NSData object&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSData&lt;/span&gt; *stringData = [qrString dataUsingEncoding:&lt;span class=&quot;built_in&quot;&gt;NSUTF8StringEncoding&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Create the filter&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CIFilter&lt;/span&gt; *qrFilter = [&lt;span class=&quot;built_in&quot;&gt;CIFilter&lt;/span&gt; filterWithName:&lt;span class=&quot;string&quot;&gt;@&quot;CIQRCodeGenerator&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Set the message content and error-correction level&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[qrFilter setValue:stringData forKey:&lt;span class=&quot;string&quot;&gt;@&quot;inputMessage&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[qrFilter setValue:&lt;span class=&quot;string&quot;&gt;@&quot;H&quot;&lt;/span&gt; forKey:&lt;span class=&quot;string&quot;&gt;@&quot;inputCorrectionLevel&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Send the image back&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; qrFilter.outputImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成二维码的过滤器需要一个NSData对象，所以我们首先把NSString对象使用UTF-8的编码转换成一个NSData对象。&lt;/p&gt;
&lt;p&gt;然后和之前我们做的一样，创建一个&lt;code&gt;CIFilter&lt;/code&gt;对象，使用&lt;code&gt;filterWithName:&lt;/code&gt;工厂方法,指定名字为&lt;code&gt;CIQRCodeGenerator&lt;/code&gt;，这种情况下面我们需要设置两个key，一个是设置&lt;code&gt;inputMessage&lt;/code&gt;,它代表我们刚刚创建的NSData对象，还有一个&lt;code&gt;inputCorrectionLevel&lt;/code&gt;用来指定生成二维码的等级，一共有4中等级:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;L 7%的错误弹性&lt;/li&gt;
&lt;li&gt;M 15%的错误弹性&lt;/li&gt;
&lt;li&gt;Q 25%的错误弹性&lt;/li&gt;
&lt;li&gt;H 30%的错误弹性&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;一旦我们完成了这些，然后我们可以返回一个过滤器的输出图像，它是一个1pt的最小的分辨率的&lt;code&gt;CIImage&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;我们想要重设这个图像的大小，但是我们并不想对它进行篡改。为了达到这个目的，我们创建一个新的方法来进行图像的调整:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *)createNonInterpolated&lt;span class=&quot;built_in&quot;&gt;UIImageFormCIImage&lt;/span&gt;:(&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *)image withScale:(&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt;) scale &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Render the CIImage into a CGImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGImageRef&lt;/span&gt; cgImage = [[&lt;span class=&quot;built_in&quot;&gt;CIContext&lt;/span&gt; contextWithOptions:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;] create&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:image fromRect:image.extent];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Now we&#39;ll rescale using CoreGraphics&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIGraphicsBeginImageContext&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;CGSizeMake&lt;/span&gt;(image.extent.size.width * scale, image.extent.size.width * scale));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGContextRef&lt;/span&gt; context = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetCurrentContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// We don&#39;t want to interpolate (since we&#39;ve got a pixel-corrent image)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGContextSetInterpolationQuality&lt;/span&gt;(context, k&lt;span class=&quot;built_in&quot;&gt;CGInterpolationNone&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGContextDrawImage&lt;/span&gt;(context, &lt;span class=&quot;built_in&quot;&gt;CGContextGetClipBoundingBox&lt;/span&gt;(context), cgImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Get the image out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *scaledImage = &lt;span class=&quot;built_in&quot;&gt;UIGraphicsGetImageFromCurrentImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Tidy up&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIGraphicsEndImageContext&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGImageRelease&lt;/span&gt;(cgImage);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; scaledImage;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个上面的例子一样，我们首先创建了一个&lt;code&gt;CGImage&lt;/code&gt;来代表&lt;code&gt;CIImage&lt;/code&gt;.然后我们创建一个核心的图像上下文来重新调节。最重要的一行是设置质量不能篡改。如果我们重新调节图像，它看来就是十分可怕的，并且形成像素化，但是这里我们就是需要像素化的二维码:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CGContextSetInterpolationQuality&lt;/span&gt;(context, k&lt;span class=&quot;built_in&quot;&gt;CGInterpolationNone&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一旦我们绘制这个图像到上下文中，我们就可以抓住这个形成的&lt;code&gt;UIImage&lt;/code&gt;然后返回它。到此为止，我们完成的生成器就像这个样子:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;)handleGenerateButtonPressed:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Disable the UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; set&lt;span class=&quot;built_in&quot;&gt;UIElementsAsEnabled&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.stringTextField resignFirstResponder];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Get the string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;NSString&lt;/span&gt; *stringToEncode = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.stringTextField.text;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Generate the image&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *grCode = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; createQRForString:stringToEncode];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Convert to an UIImage&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *qrCodeImg = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; createNonInterpolated&lt;span class=&quot;built_in&quot;&gt;UIImageFromCIImage&lt;/span&gt;:qrCode withScale &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * [[&lt;span class=&quot;built_in&quot;&gt;UIScreen&lt;/span&gt; mainScreen] scale]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// And push the image on to the screen&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.qrImageView.image = qrCodeImg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Re-enable the UI&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; set&lt;span class=&quot;built_in&quot;&gt;UIElementsAsEnable&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里还有一个工具的方法来用进行禁用UI的(当生成二维码过程中):&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)set&lt;span class=&quot;built_in&quot;&gt;UIElementsAsEnabled&lt;/span&gt;:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)enabled &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.generateButton.enabled = enabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.stringTextField.enabled = enabled;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你运行应用程序，你就会看到可以有能力随时生成二维码，这是我们不做处理，以后我们就可以给出一个方法来阅读他们.&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/19/ios7-day-by-day-day15-coreimage-filters-2.png&quot;&gt;
&lt;h3 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h3&gt;&lt;p&gt;CoreImage是一个方便的框架做一些相当先进的图像处理,而不必太涉及低级图像处理。它的怪癖,但它可以是非常有用的。与新图像过滤器和QR代码生成器可能就挽救了你找到一个外部依赖项或编写自己的版本。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/10/ios7-day-by-day-day-15-coreimage-filters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 15 :: CoreImage Filters&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;在iOS5中就引入了&lt;code&gt;CoreImage&lt;/code&gt;这个框架，它是用来进行图像处理的。它抽象所有低级的与图像处理有关联的方法，从用户角度提供易于使用的过滤事件链架构。i0S7中介绍了新的过滤器，其中的一些，我们将会在进行的文章中介绍，我们将会来看看一些传统的图像过滤效果，然后在查看创建具有过滤效果的生成二维码的效果。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Photo-Effect-Filters-图像过滤效果&quot;&gt;&lt;a href=&quot;#Photo-Effect-Filters-图像过滤效果&quot; class=&quot;headerlink&quot; title=&quot;Photo Effect Filters - 图像过滤效果&quot;&gt;&lt;/a&gt;Photo Effect Filters - 图像过滤效果&lt;/h3&gt;&lt;p&gt;在移动应用程序世界里，能够应用比较酷的图片效果是一种趋势。例如instagram就十分的流行。&lt;code&gt;CoreImage&lt;/code&gt;添加了很多十分简单的是可以使用的过滤效果来帮助我们在应用程序中添加很多功能。&lt;/p&gt;
&lt;p&gt;为了能够使用这些过滤器，我们需要首先为&lt;code&gt;CoreImage&lt;/code&gt;做点功课。&lt;code&gt;CoreImage&lt;/code&gt;指定它自己的图像类型-&lt;code&gt;CIImage&lt;/code&gt;,它可以从很多不同的源被创建，包括与&lt;code&gt;CoreGraphics&lt;/code&gt;等价的&lt;code&gt;CGImage&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; *_input&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; imageNamed:&lt;span class=&quot;string&quot;&gt;@&quot;shinobi-badge-head.jpg&quot;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; *_inputImage = [&lt;span class=&quot;built_in&quot;&gt;CIImage&lt;/span&gt; imageWith&lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;:[_input&lt;span class=&quot;built_in&quot;&gt;UIImage&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;CGImage&lt;/span&gt;]];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 14 :: Interactive View Controller Transitions</title>
    <link href="http://kingiol.github.io/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions/"/>
    <id>http://kingiol.github.io/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions/</id>
    <published>2014-01-18T14:14:00.000Z</published>
    <updated>2014-01-19T12:41:46.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;回顾&lt;a href=&quot;/blog/2014/01/12/ios7-day-by-day-day10-custom-uiviewcontroller-transitions/&quot;&gt;Day 10&lt;/a&gt;，我们已经介绍了如何在导航(navigation)视图中创建自定义的平滑转换效果。交互式试图控制器转换添加了另外的维度，允许用户进行交互式控制，通常是手势操作。&lt;/p&gt;
&lt;p&gt;今天的文章将会查看如何为一个模态的试图控制器创建一个交互式视图转换,使用一个类似于翻牌的效果。视图的翻拍效果动画，随着用户的手势变化而变化。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Flip-Transition-Animation-翻转过渡效果&quot;&gt;&lt;a href=&quot;#Flip-Transition-Animation-翻转过渡效果&quot; class=&quot;headerlink&quot; title=&quot;Flip Transition Animation - 翻转过渡效果&quot;&gt;&lt;/a&gt;Flip Transition Animation - 翻转过渡效果&lt;/h3&gt;&lt;p&gt;交互转换扩大了自定义的动画，因此我们需要自己创建一个自定义的渐变动画。我们需要一个对象适配了&lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt;协议.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCFlipAnimate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; dismissal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;我们定义了一个&lt;code&gt;dismissal&lt;/code&gt;属性，它将会用来确定牌的翻转方向。在这之前我们需要实现2个方法:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)animateTransition:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&amp;gt;)transitionContext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//	Get the respective view controllers&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *fromVC = [transitionContext viewControllerForKey:&lt;span class=&quot;built_in&quot;&gt;UITransitionContextFromViewControllerKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *toVC = [transitionContext viewControllerForKey:&lt;span class=&quot;built_in&quot;&gt;UITransitionContextToViewControllerKey&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Get the views&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *containerView = [transitionContext containerView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *fromView = fromVC.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; *toView = toVC.view;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Add the toView to the container&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[containerView addSubview:toView];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Set the frames&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGRect&lt;/span&gt; initialFrame = [transitionContext initialFrameForViewController:fromVC];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	fromView.frame = initialFrame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	toView.frame = initialFrame;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Start building the transform - 3D so need perspective&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CATransform3D&lt;/span&gt; transform = &lt;span class=&quot;built_in&quot;&gt;CATransform3DIdentity&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	transform.m34 = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;/&lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(initialFrame);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	containerView.layer.sublayerTransform = transform;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; direction = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.dismissal ? &lt;span class=&quot;number&quot;&gt;-1.0&lt;/span&gt; : &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	toView.layer.transform = &lt;span class=&quot;built_in&quot;&gt;CATransform3DMakeRotation&lt;/span&gt;(-direction * M_PI_2, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; animateKeyframesWithDuration:[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; transitionDuration:transitionContext] delay:&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; options:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// First half is rotating in&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; addKeyframeWithRelativeStartTime:&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; relativeDuration:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			fromView.layer.transform = &lt;span class=&quot;built_in&quot;&gt;CATransform3DMakeRotation&lt;/span&gt;(direction * M_PI_2, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;built_in&quot;&gt;UIView&lt;/span&gt; addKeyframeWithRelativeStartTime:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; relativeDuration:&lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt; animations:^&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			toView.layer.transform = &lt;span class=&quot;built_in&quot;&gt;CATransform3DMakeRotation&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125; completion:^(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; finished) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[transitionContext completeTransition:![transitionContext transitionWasCancelled]];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;NSTimeInterval&lt;/span&gt;)transitionDuration:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerContextTransitioning&lt;/span&gt;&amp;gt;)transitionContext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个动画的方法看起来十分的复杂，但是它使用新的UIView的关键帧动画，这个我们已经在&lt;a href=&quot;/blog/2014/01/13/ios7-day-by-day-day11-uiview-key-frame-animations/&quot;&gt;Day 11&lt;/a&gt;中介绍了.重要的一部分需要注意的是&lt;code&gt;dismissal&lt;/code&gt;属性，它用来决定旋转方向的执行。其他的是，动画执行部分,这个时候我们并不是深入讨论细节部分。要查看详细的信息Day 10 的&lt;a href=&quot;/blog/2014/01/12/ios7-day-by-day-day10-custom-uiviewcontroller-transitions/&quot;&gt;custom view controller transitions&lt;/a&gt;和Day 11的&lt;a href=&quot;/blog/2014/01/13/ios7-day-by-day-day11-uiview-key-frame-animations/&quot;&gt;UIView key-frame animates&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;现在我们有了一个动画的对象，我们需要把它添加到我们自己的视图控制器转换中，我们已经创建了一个storyboard，它包含了2个视图控制器。第一个包含的按钮，它可以触发展示一个模态视图控制器，第二个包含的按钮，它能够是模态视图控制器消失。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;IBAction&lt;/span&gt;)handleDismissPressed:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们运行应用程序，然后我们就可以看到标准的转换动画来展示和消失一个模态的视图控制器。还有一个标准的翻转的转换我们可以使用，但是我们对使用自定义的动画比较的感兴趣，所以让我们来添加自定义的转换动画。&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-0.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-1.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-2.png&quot;&gt;
&lt;p&gt;在Day 10中我们控制导航控制器(navigation controller)的转换,所以我们实现了&lt;code&gt;UINavigationControllerDelegated&lt;/code&gt;协议。在这里我们需要连接模态视图控制器来控制它的转换，所以我们需要实现&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt;协议。它有我们熟悉的方法，但是我们需要其中的2个方法是&lt;code&gt;animationControllerForPresentedController:presentingController:sourceController:&lt;/code&gt;和&lt;code&gt;animationControllerForDismissedController:&lt;/code&gt;,我们需要在主要的视图控制器中实现这些方法，并且返回我们在上面创建的动画对象:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCViewController&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerTransitioningDelegate&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimation&lt;/span&gt; *_flipAnimate;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCViewController&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_flipAnimation = [S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimation&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControlerForPresentedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presented presentingController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)presenting sourceController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)source &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_flipAnimation.dismissal = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _flipAnimation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animationControllerForDismissedController:(&lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt; *)dismissed &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_flipAnimation.dismissal = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _flipAnimation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里需要注意的比较重要的信息是在&lt;code&gt;present&lt;/code&gt;和&lt;code&gt;dismiss&lt;/code&gt;方法中设置的&lt;code&gt;dismissal&lt;/code&gt;属性是不同的，代表了不同的翻转方向。第二需要做的就是进行设置视图控制器的代理:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForSegue:(&lt;span class=&quot;built_in&quot;&gt;UIStoryboardSegue&lt;/span&gt; *)segue sender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([segue.destinationViewController isKindOfClass:[SCModalViewController class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Set the delegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		SCModalViewController *vc = (SCModalViewController *)segue.destinationViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vc.transitioningDelegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你现在运行应用程序，你就可以查看到我哦们自定义的动画切换效果了.&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-3.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-4.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-5.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/18/ios7-day-by-day-day14-interactive-view-controller-transitions-6.png&quot;&gt;
&lt;h3 id=&quot;Interactive-transitioning-交互式转换&quot;&gt;&lt;a href=&quot;#Interactive-transitioning-交互式转换&quot; class=&quot;headerlink&quot; title=&quot;Interactive transitioning - 交互式转换&quot;&gt;&lt;/a&gt;Interactive transitioning - 交互式转换&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt;协议中还有2个方法来用提供交互式转换的支持，他们两个都返回一个实现&lt;code&gt;UIViewControllerInteractiveTransitioning&lt;/code&gt;协议的对象。我们可以自己创建对象来实现这些协议，但是Apple已经为我们提供了一些具体类的形式，&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;已经包含了绝大多数用例。&lt;/p&gt;
&lt;p&gt;交互的概念(实现了&lt;code&gt;UIViewControllerInteractiveTransitioning&lt;/code&gt;的对象)就是它可以控制动画效果(实现了&lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt;协议的对象)的过程。&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;类提供了一些方法可以用百分比的方式来激活指定的动画过程。&lt;/p&gt;
&lt;p&gt;这些添加到我们项目中是十分简单的。我们想要创建一个pan手势，它代表了用户竖直的拖拽，这将会控制模式视图的展现和消失。我们将会创建一个&lt;code&gt;UIPercentDrivenInteractiveTransition&lt;/code&gt;的子类，它包含了下面的一些属性:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCFlipAnimationInteractor&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;UIPercentDrivenInteractiveTransition&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *gestureRecogniser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (nomatomic, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readonly&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; interactionInProgress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIViewController&lt;/span&gt;&amp;lt;S&lt;span class=&quot;built_in&quot;&gt;CInterctiveTransitionViewControllerDelegate&lt;/span&gt;&amp;gt; *presentingVC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中的手势就是我们上面刚刚说的实现的那个效果，现在我们需要查看的是需要一个适配简单的协议:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@protocol&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCInteractiveTransitionViewControllerDelegate&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)proceedToNextViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;子类的实现体如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCFlipAnimationInteractor&lt;/span&gt; ()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *gestureRecogniser;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;strong&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;readwrite&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; interactionInProgress;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCFlipAnimationInteractor&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (instancetype)init &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; = [&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; init];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.gestureRecogniser = [[&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; alloc] initWithTarget:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; action:&lt;span class=&quot;keyword&quot;&gt;@selector&lt;/span&gt;(handlePan:)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，我们需要重新定义两个属性为可读可写状态，然后设置手势。需要注意的是这是我们并没有把手势和任何的视图关联起来.&lt;/p&gt;
&lt;p&gt;手势操作的方法如下:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)handlePan:(&lt;span class=&quot;built_in&quot;&gt;UIPanGestureRecognizer&lt;/span&gt; *)pgr &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGPoint&lt;/span&gt; translation = [pgr ranslationInView:pgr.view];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;CGFloat&lt;/span&gt; percentage = fabs(translation.y / &lt;span class=&quot;built_in&quot;&gt;CGRectGetHeight&lt;/span&gt;(pgr.view.bounds));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (pgr.state) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateBegan&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interactionInProgress = &lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.presentingVC proceedToNextViewController];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateChanged&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; updateInteractiveTransition:percentage];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateEnded&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (percentage &amp;lt; &lt;span class=&quot;number&quot;&gt;0.5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cancelInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; finishInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interactionInProgress = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIGestureRecognizerStateCancelled&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; cancelInteractiveTransition];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interactionInProgress = &lt;span class=&quot;literal&quot;&gt;NO&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面手势操作就是我们在交互中需要用到的。&lt;/p&gt;
&lt;p&gt;首先，我们需要为交互转换添加新的方法，需要在主要的试图控制器中实现&lt;code&gt;UIViewControllerTransitioningDelegate&lt;/code&gt;协议:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerInteractiveTransitioning&lt;/span&gt;&amp;gt;)interactionControllerForPresentation:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animator &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _animationInteractor.interactionInProgress ? _animationInteractor : &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerInteractiveTransitioning&lt;/span&gt;&amp;gt;)interactionControllerForDismissal:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;)animator &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; _animationInteractor.interactionInProgress ? _animationInteractor : &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有两个一直的方法(展示和消失).我们值需要在进行交互转换的时候返回一个交互对象.也就是用户点击按钮而不是手势操作，我们就指定一个非交互式转换。这就是我们交互类中的&lt;code&gt;interactionInProgress&lt;/code&gt;属性的作用。我们返回一个&lt;code&gt;_animationInteractor&lt;/code&gt;类实例，这个在viewDidLoad方法中进行赋值:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_animationInteractor = [S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimationInteractor&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_flipAnimation = [S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimation&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们在自定义的交互中创建了手势，但是并没有把它与视图相关联，所以我们现在来做这些工作，在我们的视图控制器中的&lt;code&gt;viewDidAppear:&lt;/code&gt;方法中进行设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Add the gesture recogniser to the window first render time&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (![&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.window.gestureRecognizers containsObject:_animationInteractor.gestureRecogniser]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.view.window addGestureRecognizer:_animationInteractor.gestureRecogniser];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们很正常的把手势添加到视图中，但是在这里我们却添加到window对象中。这是因为动画发生的时候，视图控制器中的视图将会被移除，因此手势就没有办法响应行为了。把它添加到window上面，将会确保我们希望的行为。如果我们是执行一个导航控制器的转换我们可以把手势添加到导航控制器的视图中。这个手势在&lt;code&gt;viewDidAppear:&lt;/code&gt;中添加，因为这个时候window属性已经被附上值了。&lt;/p&gt;
&lt;p&gt;最后一个块的困惑是在交互器上面设置&lt;code&gt;presentingVC&lt;/code&gt;属性。为了达到这个目的，我们需要确保我们的试图控制器实现了&lt;code&gt;SCInteractiveTransitionViewControllerDelegate&lt;/code&gt;协议。在我们的主试图控制器，就变得非常的简单了:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCViewController&lt;/span&gt; () &amp;lt;&lt;span class=&quot;title&quot;&gt;SCInteractiveTransitionViewControllerDelegate&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;UIViewControllerTransitioningDelegate&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimationInteractor&lt;/span&gt; *_animationInteractor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimation&lt;/span&gt; *_flipAnimation;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#pragma mark - SCInteractiveTransitionViewControllerDelegate methods&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)proceedToNextViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; performSegueWithIdentifier:&lt;span class=&quot;string&quot;&gt;@&quot;displayModal&quot;&lt;/span&gt; sender:&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;到目前为止，我们已经实现了需要的方法，我们可以在交互上面设置正确的属性，具体在&lt;code&gt;viewDidAppear&lt;/code&gt;上面设置。这将会确保每一次的展示都是正确的。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Set the recipeint of the interactor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_animationInteractor.presentingVC = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;所以，当用户触发拖拽手势的时候，交互器就会调用&lt;code&gt;proceedToNextViewController&lt;/code&gt;方法，这个方法可以展示模态视图控制器，这就是全部我们希望得到的。&lt;/p&gt;
&lt;p&gt;为了在模态视图控制器上面执行相同的操作，必须要有一个交互器的引用对象(所以，它可以更新&lt;code&gt;presentingVC&lt;/code&gt;属性)。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCModalViewController&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;UIViewController&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;SCInteractiveTransitionViewControllerDelegate&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;weak&lt;/span&gt;) S&lt;span class=&quot;built_in&quot;&gt;CFlipAnimationInteractor&lt;/span&gt; *interactor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们将会在视图控制器的&lt;code&gt;prepareForSegue:&lt;/code&gt;方法中设置这个属性:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForSegue:(&lt;span class=&quot;built_in&quot;&gt;UIStoryboardSegue&lt;/span&gt; *)segue sender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([segue.destinationViewController isKindOfClass[SCModalViewController class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// Set the delegate&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vc.interactor = _animationInteractor;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)proceedToNextViewController &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; dismissViewControllerAnimated:&lt;span class=&quot;literal&quot;&gt;YES&lt;/span&gt; completion:&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后，一旦模态视图控制器出现的时候，我们需要更新交互器上面的属性，用来确保下一次交互转换开始(也就是用户开始竖直的拖拽)它将会调用模态视图控制器的方法，而不是最开始的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidAppear:(&lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt;)animated &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Reset which view controller should be the receipient of the&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// interactor&#39;s transition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.interactor.presentingVC = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这就完成了。&lt;/p&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;交互式试图控制器的转换是相当的一个复杂的主题，主要的原因是一系列不同的协议需要去实现，也因为代码中没有明确哪一部分负责什么(例如，谁是拥有手势对象的).然而，在实际中，我们使用非常强大的少量的代码。我鼓励你试一试自定义的视图转换，但值得注意的是，具有非常强大的责任，是因为我们现在需要做大量的视图控制器间的转换，我们应该确保我们并没有复杂化用户体验。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/09/ios7-day-by-day-day-14-interactive-view-controller-transitions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 14 :: Interactive View Controller Transitions&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;回顾&lt;a href=&quot;/blog/2014/01/12/ios7-day-by-day-day10-custom-uiviewcontroller-transitions/&quot;&gt;Day 10&lt;/a&gt;，我们已经介绍了如何在导航(navigation)视图中创建自定义的平滑转换效果。交互式试图控制器转换添加了另外的维度，允许用户进行交互式控制，通常是手势操作。&lt;/p&gt;
&lt;p&gt;今天的文章将会查看如何为一个模态的试图控制器创建一个交互式视图转换,使用一个类似于翻牌的效果。视图的翻拍效果动画，随着用户的手势变化而变化。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Flip-Transition-Animation-翻转过渡效果&quot;&gt;&lt;a href=&quot;#Flip-Transition-Animation-翻转过渡效果&quot; class=&quot;headerlink&quot; title=&quot;Flip Transition Animation - 翻转过渡效果&quot;&gt;&lt;/a&gt;Flip Transition Animation - 翻转过渡效果&lt;/h3&gt;&lt;p&gt;交互转换扩大了自定义的动画，因此我们需要自己创建一个自定义的渐变动画。我们需要一个对象适配了&lt;code&gt;UIViewControllerAnimatedTransitioning&lt;/code&gt;协议.&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SCFlipAnimate&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt; &amp;lt;&lt;span class=&quot;title&quot;&gt;UIViewControllerAnimatedTransitioning&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@property&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;nonatomic&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;assign&lt;/span&gt;) &lt;span class=&quot;built_in&quot;&gt;BOOL&lt;/span&gt; dismissal;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;@end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 13 :: Route Directions with MapKit</title>
    <link href="http://kingiol.github.io/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit/"/>
    <id>http://kingiol.github.io/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit/</id>
    <published>2014-01-15T01:30:00.000Z</published>
    <updated>2014-01-18T13:47:36.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;对于iOS中的地图框架，在iOS7中添加了一些些小小的改变。一个简单的添加的例子就是我们可以通过两点来或者它们之间的路径。在今天的文章中，我们将会看看如何来使用这个简单的API构建一个一件的查询路径的应用程序。通过这个还可以看看添加层的渲染的API。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Requesting-Directions-查询路线请求&quot;&gt;&lt;a href=&quot;#Requesting-Directions-查询路线请求&quot; class=&quot;headerlink&quot; title=&quot;Requesting Directions - 查询路线请求&quot;&gt;&lt;/a&gt;Requesting Directions - 查询路线请求&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;MapKit&lt;/code&gt;中，我们需要用到很多不同的类，但是我们使用的时候却是非常简单的。为了能够获取到Apple的路径集合服务，我们需要把信息封装到&lt;code&gt;MKDirectionsRequest&lt;/code&gt;对象中。自从iOS6中就包含了此类，不过只是提高给Apple内部进行生成查询路线，但是在iOS7中已经得到了扩展，允许开发者进行请求指示。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKDirectionsRequest&lt;/span&gt; *directionsRequest = [&lt;span class=&quot;built_in&quot;&gt;MKDirectionsRequest&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了封装一个请求，我们需要设置开始和结束的点，它们都是&lt;code&gt;MKMapItem&lt;/code&gt;对象。这些对象可以代表地图上面的位置，包含自身的坐标和其他一些元数据(例如:名称，电话号码和URL)。创建它们有很多的选项。下面是其中一个使用用户当前的坐标的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; *source = [&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; mapItemForCurrentLocation];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当用户启动第一次启动应用程序的时候，就会弹出一个询问是否使用他们当前位置权限的对话框:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-0.png&quot;&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;你也可以使用一个指定的坐标来创建一个map item,使用这个方法&lt;code&gt;initWithPlacemark:&lt;/code&gt;,这就需要使用&lt;code&gt;MapKit&lt;/code&gt;中的另外的一个类.&lt;code&gt;MKPlacemark&lt;/code&gt;代表了实际地图上面的坐标(也就是经度和纬度)。我们可以使用&lt;code&gt;CoreLocation&lt;/code&gt;中的转换方法来生成一个placemark，但是这是超过了本篇要将的内容的范畴，我们将为一些固定的坐标创建placemark.把他们封装在一起就可以完成&lt;code&gt;MKDirectionsRequest&lt;/code&gt;对象的设置了。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Make the destination&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CLLocationCoordinate2D destinationCoords = CLLocationCoordinate2DMake(&lt;span class=&quot;number&quot;&gt;38.8977&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-77.0365&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKPlacemark&lt;/span&gt; *destinationPlacemark = [[&lt;span class=&quot;built_in&quot;&gt;MKPlacemark&lt;/span&gt; alloc] initWithCoordinate:destinationCoords addressDictionary:&lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; *destination = [[&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; alloc] initWithPlacemark:destinationPlacemark];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Set the source and destination on the request&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[directionsRequest setSource:source];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[directionsRequest setDestination:destination];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;code&gt;MKDirectionsRequest&lt;/code&gt;中还有一些其他的属性，它们是用来控制路径的，我们后面再来进行设置：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;departureDate&lt;/code&gt;和&lt;code&gt;arrivalDate&lt;/code&gt;。设置了这些值将会返回一天中最优的交通状况的路径。例如允许标准的交通状况。&lt;/li&gt;
&lt;li&gt;transportType。当前Apple提供了步行和驾车的选择使用枚举值&lt;code&gt;MKDirectionsTransportTypeAutomobile&lt;/code&gt;或者&lt;code&gt;MKDirectionsTransportTypeWalking&lt;/code&gt;。默认的值是&lt;code&gt;MKDirectionsTransportTypeAny&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requestsAlternateRoutes&lt;/code&gt;。如果查询路线的服务器查询出多于一个可选的路线，然后这是这个属性值为YES,就会返回所有路线。否则则会返回一条路线。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;现在，我们已经得到一个完善的路径查询请求，我们可以发送它到服务器来获得路线。可以通过下面的代码进行发送请求:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKDirections&lt;/span&gt; *directions = [[&lt;span class=&quot;built_in&quot;&gt;MKDirections&lt;/span&gt; alloc] initWithRequest:directionsRequest];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里有两个方法可供使用，&lt;code&gt;calculateETAWithCompletionHandler:&lt;/code&gt;估算获得路线的时间,&lt;code&gt;calculateDirectionsWithCompletionHandler&lt;/code&gt;计算出实际的路线。这些方法都是异步的，并且都有一个回调函数块。&lt;code&gt;MKDirections&lt;/code&gt;对象有一个cancel方法,用来作为当前运行请求的建议.一个&lt;code&gt;MKDirections&lt;/code&gt;对象一次只能运行一个请求，其他附加的请求将会失败。如果你想要运行多个模拟请求，你就需要多个&lt;code&gt;MKDirections&lt;/code&gt;对象，但是必须意识到请求很多有可能Apple服务会返回错误。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[directions calculateDirectionsWithCompletionHandler:^(&lt;span class=&quot;built_in&quot;&gt;MKDirectionsResponse&lt;/span&gt; *response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Handle the response here&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;Directions-Response-请求路线响应&quot;&gt;&lt;a href=&quot;#Directions-Response-请求路线响应&quot; class=&quot;headerlink&quot; title=&quot;Directions Response - 请求路线响应&quot;&gt;&lt;/a&gt;Directions Response - 请求路线响应&lt;/h3&gt;&lt;p&gt;这个从Apple服务返回的响应是一个&lt;code&gt;MKDirectionsResponse&lt;/code&gt;对象，以及开始和结束坐标点，包含了一个&lt;code&gt;MKRoute&lt;/code&gt;对象的数组.需要注意的是，如果我们设置&lt;code&gt;requestsAlternateRoutes&lt;/code&gt;为YES，那么数组中就值包含一条信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;MKRoute&lt;/code&gt;对象，正如名字所示，代表两个点之间的路线。它包含了一系列的路线属性信息:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;:道路的名称&lt;/li&gt;
&lt;li&gt;&lt;code&gt;advisoryNotices&lt;/code&gt;:包含一些警告的详细信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt;:路线的长度&lt;/li&gt;
&lt;li&gt;&lt;code&gt;expectedTravelTime&lt;/code&gt;:行走花费的时间&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transportType&lt;/code&gt;:行走的类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;polyline&lt;/code&gt;:&lt;code&gt;MKPolyline&lt;/code&gt;对象代表了地图上面的路段信息，可以被用来绘制在地图视图上面&lt;/li&gt;
&lt;li&gt;&lt;code&gt;steps&lt;/code&gt;:装有&lt;code&gt;MKRouteStep&lt;/code&gt;对象的数组，用来实现不同路段的连通。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;另一个参数是&lt;code&gt;NSError&lt;/code&gt;对象，所以我们可以使用下面的请求路线响应函数:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[directions calculateDirectionsWithCompletionHandler:^(&lt;span class=&quot;built_in&quot;&gt;MKDirectionsResponse&lt;/span&gt; *response, &lt;span class=&quot;built_in&quot;&gt;NSError&lt;/span&gt; *error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//	Now handle the result&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSLog&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;@&quot;There was an error getting your directions&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;//	So there wasn&#39;t an error - let&#39;s plot those routes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_currentRoute = [response.routes firstObject];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt; plotRouteOnMap:_currentRoute];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们使用了一个工具的方法来实现绘制路线到地图上面，将会在下一章节介绍。&lt;/p&gt;
&lt;h3 id=&quot;Rendering-a-Polyline-绘制路线&quot;&gt;&lt;a href=&quot;#Rendering-a-Polyline-绘制路线&quot; class=&quot;headerlink&quot; title=&quot;Rendering a Polyline - 绘制路线&quot;&gt;&lt;/a&gt;Rendering a Polyline - 绘制路线&lt;/h3&gt;&lt;p&gt;我们已经把道路信息转换成多段线。iOS7改变了在地图上面渲染层的方法，具体的在&lt;code&gt;MKOverlayRenderer&lt;/code&gt;类中介绍.如果你想使用自定义的图形或者不是标准的绘制技术，我们就可以继承创建一个自定的渲染类，然而，系统提供了很多的渲染层。我们希望渲染一个多段线，所以，我们可以使用&lt;code&gt;MKPolylineRenderer&lt;/code&gt;类。我们需要确定何时何地来创建我们自己的渲染类，但是首先我们需要看看上一节中编写的&lt;code&gt;plotRouteMap:&lt;/code&gt;方法的实现。&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;MKPolyline&lt;/code&gt;对象代表了一个路线的多段信息，并且适配&lt;code&gt;MKOverlay&lt;/code&gt;协议。这就意味着，我们可以把它作为一个层添加到&lt;code&gt;MKMapView&lt;/code&gt;对象中，通过使用&lt;code&gt;addOverlay:&lt;/code&gt;方法来实现:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)plotRouteOnMap:(&lt;span class=&quot;built_in&quot;&gt;MKRoute&lt;/span&gt; *)route &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (_routeOverlay) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.mapView removeOverlay:_routeOverlay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Update the ivar&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	_routeOverlay = route.polyline;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Add it to the map&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.mapView addOverlay:_routeOverlay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这个方法使用了&lt;code&gt;MKRoute&lt;/code&gt;对象，并且添加了路线中的多段线层，然后被添加到mapView中。我们使用了一个实例变量来对polyline进行全局的引用。这意味着我们可以先删除之前的层信息，然后重新赋值新的信息。&lt;/p&gt;
&lt;p&gt;尽管我们现在已经把层添加到mapView上面了，但是它已经还没有实现绘制工作。这是因为地图就不知道如何来绘制这个层对象，所以这就是需要我们创建&lt;code&gt;MKOverlayRenderer&lt;/code&gt;对象的时候了。当一个层被添加到mapview上面的时候，mapview就是调用它自身的代理来渲染这个层。&lt;/p&gt;
&lt;p&gt;我们需要适配&lt;code&gt;MKMapViewDelegate&lt;/code&gt;协议，并且实现其中的一些方法用来提供mapview渲染我们自己的多段线:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;built_in&quot;&gt;MKOverlayRenderer&lt;/span&gt; *)mapView:(&lt;span class=&quot;built_in&quot;&gt;MKMapView&lt;/span&gt; *)mapView rendererForOverlay:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;&amp;lt;&lt;span class=&quot;built_in&quot;&gt;MKOverlay&lt;/span&gt;&amp;gt;)overlay &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;built_in&quot;&gt;MKPolylineRenderer&lt;/span&gt; *renderer = [[&lt;span class=&quot;built_in&quot;&gt;MKPolylineRenderer&lt;/span&gt; alloc] initWithPolyline:overlay];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renderer.strokeColor = [&lt;span class=&quot;built_in&quot;&gt;UIColor&lt;/span&gt; redColor];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	renderer.lineWidth = &lt;span class=&quot;number&quot;&gt;4.0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; renderer;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们这里有些简化的情况是，我们知道这里只徐奥一个覆盖层，并且它的类型是&lt;code&gt;MKPolyline&lt;/code&gt;,因此并不需要其他的代码来确定渲染器如何返回。我们创建一个&lt;code&gt;MKPolylineRenderer&lt;/code&gt;,它是&lt;code&gt;MKOverlayRenderer&lt;/code&gt;的子类目的是绘制多段线覆盖层。我们设置一些简单的属性(&lt;code&gt;strokeColor&lt;/code&gt;和&lt;code&gt;lineWidth&lt;/code&gt;)，所以我们可以看到创建的覆盖层，然后返回创建的渲染器。&lt;/p&gt;
&lt;p&gt;在这之前需要先设置mapview的delegate，然后会自动调用代理的方法来把覆盖层添加到地图上面:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)viewDidLoad &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	[&lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt; viewDidLoad];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;comment&quot;&gt;// Do any additional setup after loading the view, typically from a nib.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.mapView.delegate = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-1.png&quot;&gt;
&lt;h3 id=&quot;Route-steps-路线步骤&quot;&gt;&lt;a href=&quot;#Route-steps-路线步骤&quot; class=&quot;headerlink&quot; title=&quot;Route steps - 路线步骤&quot;&gt;&lt;/a&gt;Route steps - 路线步骤&lt;/h3&gt;&lt;p&gt;正如上面所述的polyline代表的是一个路线，我们还提供了包含&lt;code&gt;MKRouteStep&lt;/code&gt;的数组对象，它表示了一个用户从起点到终点走的不用路线的信息。&lt;code&gt;MKRouteStep&lt;/code&gt;对象有如下的属性:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;polyline&lt;/code&gt;:表示路线的信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;instructions&lt;/code&gt;:告诉用户此路线应该如何行走的提示信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;notice&lt;/code&gt;:一些有关路线的信息&lt;/li&gt;
&lt;li&gt;&lt;code&gt;distance&lt;/code&gt;:路线距离&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transportType&lt;/code&gt;:行走路线的方式&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;在今天文章中我们完成的RouteMaster应用程序，提供了一个表格用来显示行走路线步骤的列表，然后把不同路线展示在地图上面:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-2.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-3.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-4.png&quot;&gt;
&lt;h3 id=&quot;Building-RouteMaster-构建RouteMaster应用程序&quot;&gt;&lt;a href=&quot;#Building-RouteMaster-构建RouteMaster应用程序&quot; class=&quot;headerlink&quot; title=&quot;Building RouteMaster - 构建RouteMaster应用程序&quot;&gt;&lt;/a&gt;Building RouteMaster - 构建RouteMaster应用程序&lt;/h3&gt;&lt;p&gt;我们现在来介绍我们使用路线请求和请求返回数据的过程，但是并不是很详细的介绍今天本文构建的应用程序，尽管它并没有很深入的介绍&lt;code&gt;MapKit&lt;/code&gt;的细节，但快速的查看我们应用程序的构建还是值得的。&lt;/p&gt;
&lt;p&gt;因为我们使用的storyboards，我们复写&lt;code&gt;prepareForSegue:sender:&lt;/code&gt;方法来介绍我们的视图控制器的跳转，并且需要传递的数据。例如，&lt;code&gt;SCStepsViewController&lt;/code&gt;有一个route属性，我们需要进行设置:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForSegue:(&lt;span class=&quot;built_in&quot;&gt;UIStoryboardSegue&lt;/span&gt; *)segue sender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([segue.destinationViewController isKindOfClass:[SCStepsViewController class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		SCStepsViewController *vc = (SCStepsViewController *)segue.destinationViewController;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		vc.route = _curentRoute;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;同样的，&lt;code&gt;SCIndividualStepViewController&lt;/code&gt;也有一个routeStep属性:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;- (&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt;)prepareForSegue:(&lt;span class=&quot;built_in&quot;&gt;UIStoryboardSegue&lt;/span&gt; *)segue sender:(&lt;span class=&quot;keyword&quot;&gt;id&lt;/span&gt;)sender &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ([[segue destinationViewController] isKindOfClass:[S&lt;span class=&quot;built_in&quot;&gt;CIndividualStepViewController&lt;/span&gt; class]]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		S&lt;span class=&quot;built_in&quot;&gt;CIndividualStepViewController&lt;/span&gt; *vc = (S&lt;span class=&quot;built_in&quot;&gt;CIndividualStepViewController&lt;/span&gt; *)[segue destinationViewController];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;built_in&quot;&gt;NSIndexPath&lt;/span&gt; *selectRow = [&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.tableView indexPathForSelectedRow];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;comment&quot;&gt;// If we have a selected row then set the step appropriately&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (selectedRow) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			vc.routeStep = &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.route.steps[selectedRow.row];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			vc.stepIndex = selectedRow.row;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;应用程序在模拟器中需要获得当前的位置，所以我们可以在Xcode中的Debug-&amp;gt;Simulate Location进行设置:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-5.png&quot;&gt;
&lt;p&gt;在实际的应用程序中，我们可以使用&lt;code&gt;CoreLocation&lt;/code&gt;进行获得位置信息.&lt;/p&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;在iOS7中,MapKit开始成熟一点,外加一些非常有用的api。directions API相当容易使用,尽管有大量不同的类,并返回结果与在应用程序非常容易的工作。我们现在需要的是不断提高苹果的后端服务,以便我们提供给用户更加合理的结果。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/08/ios7-day-by-day-day-13-route-directions-with-mapkit/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 13 :: Route Directions with MapKit&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;对于iOS中的地图框架，在iOS7中添加了一些些小小的改变。一个简单的添加的例子就是我们可以通过两点来或者它们之间的路径。在今天的文章中，我们将会看看如何来使用这个简单的API构建一个一件的查询路径的应用程序。通过这个还可以看看添加层的渲染的API。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Requesting-Directions-查询路线请求&quot;&gt;&lt;a href=&quot;#Requesting-Directions-查询路线请求&quot; class=&quot;headerlink&quot; title=&quot;Requesting Directions - 查询路线请求&quot;&gt;&lt;/a&gt;Requesting Directions - 查询路线请求&lt;/h3&gt;&lt;p&gt;在&lt;code&gt;MapKit&lt;/code&gt;中，我们需要用到很多不同的类，但是我们使用的时候却是非常简单的。为了能够获取到Apple的路径集合服务，我们需要把信息封装到&lt;code&gt;MKDirectionsRequest&lt;/code&gt;对象中。自从iOS6中就包含了此类，不过只是提高给Apple内部进行生成查询路线，但是在iOS7中已经得到了扩展，允许开发者进行请求指示。&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKDirectionsRequest&lt;/span&gt; *directionsRequest = [&lt;span class=&quot;built_in&quot;&gt;MKDirectionsRequest&lt;/span&gt; new];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了封装一个请求，我们需要设置开始和结束的点，它们都是&lt;code&gt;MKMapItem&lt;/code&gt;对象。这些对象可以代表地图上面的位置，包含自身的坐标和其他一些元数据(例如:名称，电话号码和URL)。创建它们有很多的选项。下面是其中一个使用用户当前的坐标的:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; *source = [&lt;span class=&quot;built_in&quot;&gt;MKMapItem&lt;/span&gt; mapItemForCurrentLocation];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当用户启动第一次启动应用程序的时候，就会弹出一个询问是否使用他们当前位置权限的对话框:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/15/ios7-day-by-day-day13-route-directions-with-mapkit-0.png&quot;&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
  <entry>
    <title>天天品尝iOS7甜点 :: Day 12 :: Dynamic Type and Font Descriptors</title>
    <link href="http://kingiol.github.io/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors/"/>
    <id>http://kingiol.github.io/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors/</id>
    <published>2014-01-14T01:38:00.000Z</published>
    <updated>2014-01-14T04:57:03.000Z</updated>
    
    <content type="html">&lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;iOS7中介绍一个高级的有关文本渲染的框架叫做&lt;code&gt;TextKit&lt;/code&gt;.&lt;code&gt;TextKit&lt;/code&gt;是建立在强大的&lt;code&gt;CoreText&lt;/code&gt;上的渲染引擎，并且现在所有的Apple提供的有关文本的组件都是已经更新到&lt;code&gt;TextKit&lt;/code&gt;引擎上面了。&lt;code&gt;TextKi&lt;/code&gt;添加到iOS中具有很重大的意义，其中一点就是它的动态类型的概念和字体描述符。今天本文将会来看看这些&lt;code&gt;TextKit&lt;/code&gt;的新特性。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Dynamic-Type-动态类型&quot;&gt;&lt;a href=&quot;#Dynamic-Type-动态类型&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Type - 动态类型&quot;&gt;&lt;/a&gt;Dynamic Type - 动态类型&lt;/h3&gt;&lt;p&gt;动态类型的概念是允许用户指定他们设备中应用程序内部的字体类型有多大。这并不是单单的改变字体大小的能力，而且也概念了其他的类型属性例如字距和行间距。这就确保文本的可读性，因为它可以自动设置不同的类型大小。为了做到这一点，你不需要指定文本类型的字体，而是使用语义表示。也就是不需要指定&lt;code&gt;Helvetica 11pt&lt;/code&gt;,你需要把这些类型设置在文本主体中。这就有点类似于HTML中的标签表示，允许用户控制外观。因此，也不需要提前设置字体的大小，在&lt;code&gt;UIFont&lt;/code&gt;中有一个新的方法可以用来纠正字体:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subHeadingLabel.font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; preferredFontForTextStyle:&lt;span class=&quot;built_in&quot;&gt;UIFontTextStyleSubheadline&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;在iOS7中一共有6中不同文本类型:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UIFontTextStyleHeadline&lt;/li&gt;
&lt;li&gt;UIFontTextStyleBody&lt;/li&gt;
&lt;li&gt;UIFontTextStyleSubheadline&lt;/li&gt;
&lt;li&gt;UIFontTextStyleFootnote&lt;/li&gt;
&lt;li&gt;UIFontTextStyleCaption1&lt;/li&gt;
&lt;li&gt;UIFontTextStyleCaption2&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们可以在代码中进行设置，同时也可以在interface builder进行设置:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-0.png&quot;&gt;
&lt;p&gt;当结合了自动布局功能之后，使用动态类型意味着用户可以在应用程序中控制文本的外观。在系统设置页面上面有一个&lt;code&gt;Text Size&lt;/code&gt;选项可以允许改变类型的大小:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-1.png&quot;&gt;
&lt;p&gt;一个中7种不同类型的字体大小，下面就是展示了它们的一些截图:&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-2.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-3.png&quot;&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-4.png&quot;&gt;
&lt;p&gt;在未来的操作系统更新指定的字体有可能会随着操作系统的发展而改变了外观。但是采用了动态类型，你可以确保你的应用程序都可以被访问和匹配操作系统的风格，而且并需要在进一步的做很多的工作。&lt;/p&gt;
&lt;h3 id=&quot;Font-Descriptors-字体描述符&quot;&gt;&lt;a href=&quot;#Font-Descriptors-字体描述符&quot; class=&quot;headerlink&quot; title=&quot;Font Descriptors - 字体描述符&quot;&gt;&lt;/a&gt;Font Descriptors - 字体描述符&lt;/h3&gt;&lt;p&gt;另一个被&lt;code&gt;TextKit&lt;/code&gt;引入的是字体描述符的概念。有许多的地方我们需要考虑字体——我们可以修改字体，而不是完全重新指定一个新的。例如，我们有一些文本，我们希望把它们作为文本的主体设置相同的字体大小，但是我们希望设置为粗体。在之前的iOS版本中我们不得不知道原本文本主体的字体，然后找出设置粗体的等价方法，然后使用&lt;code&gt;fontWithName:size:&lt;/code&gt;重新够着一个新字体的对象，然后再次进行设置。&lt;/p&gt;
&lt;p&gt;这样的做法并不是十分的直观，介绍了动态类型(dynamic type)之后，我们并不需要总是要知道我们设置的字体的大小。字体描述符(Font descriptors)使用起来十分的简单——一堆有关字体的属性集合，可以通过改变不同的属性来改变字体。例如，如果你你想获得文本主体的粗体字体：&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; *bodyFontDesciptor = [&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; preferredFontDescriptorWithTextStyle:&lt;span class=&quot;built_in&quot;&gt;UIFontTextStyleBody&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; *boldBodyFontDescriptor = [bodyFontDesciptor fontDescriptorWithSymbolicTraits:&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptorTraitBold&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.boldBodyTextLabel.font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; fontWithDescriptor:boldBodyFontDescriptor size:&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;首先，我们获得本文主体类型的描述符,然后使用&lt;code&gt;fontDescriptorWithSymbilicTraits:&lt;/code&gt;方法，我们可以覆盖一个所谓的字体特征,然后&lt;code&gt;UIFont&lt;/code&gt;的&lt;code&gt;fontWithDescriptor:size:&lt;/code&gt;方法可能被使用来获得需要的字体——并不需要设置大小，所以&lt;code&gt;size:&lt;/code&gt;参数设置为0.0,返回的字体大小取决与一开始的字体描述符。&lt;/p&gt;
&lt;p&gt;这是一个运用&lt;code&gt;UIFontDescriptor&lt;/code&gt;的示例使用字体特征，另外的一些例子如下:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UIFontDescriptorTraitItalic&lt;/li&gt;
&lt;li&gt;UIFontDescriptorTraitExpanded&lt;/li&gt;
&lt;li&gt;UIFontDescriptorTraitCondensed&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用另外的特性，使用属性有能力指定字体的外观(如衬线的类型),阅读了有关&lt;code&gt;UIFontDescriptorSymbolicTraits&lt;/code&gt;的文档可能获得更多的信息。&lt;/p&gt;
&lt;p&gt;修改一个已经存在的字体描述符，你可以创建一个属性字典，然后你可以发现字体描述符匹配你需要的效果，例子:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; *scriptFontDescriptor = [&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptor&lt;/span&gt; fontDescriptorWithFontAttributes:@&amp;#123;&lt;span class=&quot;built_in&quot;&gt;UIFontDescriptorFamilyAttribute&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;@&quot;Zapfino&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;UIFontDescriptorSizeAttribute&lt;/span&gt;: @&lt;span class=&quot;number&quot;&gt;15.0&lt;/span&gt;&amp;#125;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.scriptTextLabel.font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; fontWithDescriptor:scriptFontDescriptor size:&lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在这里我们指定了字体使用了family和size。其他设置的属性可以被使用，如下所示:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;UIFontDescriptorNameAttribute&lt;/li&gt;
&lt;li&gt;UIFontDescriptorTextStyleAttribute&lt;/li&gt;
&lt;li&gt;UIFontDescriptorVisbileNameAttribute&lt;/li&gt;
&lt;li&gt;UIFontDescriptorMatrixAttribute&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;此列表不是详尽的——UIFontDescriptor是令人难以置信的强大和带来iOS内联与许多其他文本渲染引擎用在其它地方。&lt;/p&gt;
&lt;img src=&quot;/images/2014/01/14/ios7-day-by-day-day12-dynamic-type-and-font-descriptors-5.png&quot;&gt;
&lt;h3 id=&quot;Conclusion-总结&quot;&gt;&lt;a href=&quot;#Conclusion-总结&quot; class=&quot;headerlink&quot; title=&quot;Conclusion - 总结&quot;&gt;&lt;/a&gt;Conclusion - 总结&lt;/h3&gt;&lt;p&gt;动态类型是一个非常有用的工具来提高应用程序的外观和可访问性,当结合autolayout它允许用户展示美好的内容和简单易读。字体描述符提供了一个更容易的方式来使用字体——我们更接近这个概念在我们多年的使用文字处理软件中。它应使用字体少了很多的痛苦。我们今天只看到冰山一角——类型呈现是一个复杂的概念,这些新概念iOS和提供更容易访问底层引擎。&lt;/p&gt;
&lt;p&gt;本文翻译自:&lt;a href=&quot;http://www.shinobicontrols.com/blog/posts/2013/10/07/ios7-day-by-day-day-12-dynamic-type-and-font-descriptors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS7 Day-by-Day :: Day 12 :: Dynamic Type and Font Descriptors&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章是天天品尝iOS7甜点系列的一部分，你可以查看完整的系列目录：&lt;a href=&quot;/blog/2014/01/06/introducting-ios7-day-by-day/&quot;&gt;天天品尝iOS7甜点&lt;/a&gt;&lt;/p&gt;
&lt;hr/&gt;

&lt;h3 id=&quot;Introduction-介绍&quot;&gt;&lt;a href=&quot;#Introduction-介绍&quot; class=&quot;headerlink&quot; title=&quot;Introduction - 介绍&quot;&gt;&lt;/a&gt;Introduction - 介绍&lt;/h3&gt;&lt;p&gt;iOS7中介绍一个高级的有关文本渲染的框架叫做&lt;code&gt;TextKit&lt;/code&gt;.&lt;code&gt;TextKit&lt;/code&gt;是建立在强大的&lt;code&gt;CoreText&lt;/code&gt;上的渲染引擎，并且现在所有的Apple提供的有关文本的组件都是已经更新到&lt;code&gt;TextKit&lt;/code&gt;引擎上面了。&lt;code&gt;TextKi&lt;/code&gt;添加到iOS中具有很重大的意义，其中一点就是它的动态类型的概念和字体描述符。今天本文将会来看看这些&lt;code&gt;TextKit&lt;/code&gt;的新特性。&lt;/p&gt;
&lt;p&gt;本章的实例程序能够在github上面进行访问，访问地址:&lt;a href=&quot;https://github.com/ShinobiControls/iOS7-day-by-day&quot;&gt;github.com/ShinobiControls/iOS7-day-by-day&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Dynamic-Type-动态类型&quot;&gt;&lt;a href=&quot;#Dynamic-Type-动态类型&quot; class=&quot;headerlink&quot; title=&quot;Dynamic Type - 动态类型&quot;&gt;&lt;/a&gt;Dynamic Type - 动态类型&lt;/h3&gt;&lt;p&gt;动态类型的概念是允许用户指定他们设备中应用程序内部的字体类型有多大。这并不是单单的改变字体大小的能力，而且也概念了其他的类型属性例如字距和行间距。这就确保文本的可读性，因为它可以自动设置不同的类型大小。为了做到这一点，你不需要指定文本类型的字体，而是使用语义表示。也就是不需要指定&lt;code&gt;Helvetica 11pt&lt;/code&gt;,你需要把这些类型设置在文本主体中。这就有点类似于HTML中的标签表示，允许用户控制外观。因此，也不需要提前设置字体的大小，在&lt;code&gt;UIFont&lt;/code&gt;中有一个新的方法可以用来纠正字体:&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.subHeadingLabel.font = [&lt;span class=&quot;built_in&quot;&gt;UIFont&lt;/span&gt; preferredFontForTextStyle:&lt;span class=&quot;built_in&quot;&gt;UIFontTextStyleSubheadline&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS7" scheme="http://kingiol.github.io/categories/iOS7/"/>
    
      <category term="翻译" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="iOS7 Day-by-Day" scheme="http://kingiol.github.io/categories/iOS7/%E7%BF%BB%E8%AF%91/iOS7-Day-by-Day/"/>
    
    
  </entry>
  
</feed>
